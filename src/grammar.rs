// auto-generated: "lalrpop 0.19.0"
// sha256: 1a97faf4ad1dc3c3c8d098bb2d38c477d36b6c24fcb228b55e2cf23d9d35b44
use super::lexer::*;
use super::parser::*;
use super::syntax::*;
use anyhow::anyhow;
use lalrpop_util::ParseError;
use std::collections::HashMap;
use std::iter::FromIterator;
use std::sync::atomic::Ordering;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__AttrCopy {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -6,
        // State 1
        -123,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            3 => 1,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = HashMap<String, Const>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct AttrCopyParser {
        _priv: (),
    }

    impl AttrCopyParser {
        pub fn new() -> AttrCopyParser {
            AttrCopyParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<HashMap<String, Const>, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<HashMap<String, Const>,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                // __AttrCopy = AttrCopy => ActionFn(7);
                let __sym0 = __pop_Variant3(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action7::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__AttrCopy::AttrCopyParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Attribute {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        -124,
        // State 4
        0,
        // State 5
        -7,
        // State 6
        -23,
        // State 7
        -22,
        // State 8
        -21,
        // State 9
        -30,
        // State 10
        -31,
        // State 11
        -99,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            4 => 3,
            11 => 5,
            13 => 2,
            14 => 6,
            15 => 7,
            36 => 8,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = ();
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct AttributeParser {
        _priv: (),
    }

    impl AttributeParser {
        pub fn new() -> AttributeParser {
            AttributeParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<(), __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<(),__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                // __Attribute = Attribute => ActionFn(6);
                let __sym0 = __pop_Variant4(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action6::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__Attribute::AttributeParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__CellFlag {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -12,
        // State 1
        -125,
        // State 2
        -14,
        // State 3
        -13,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            7 => 1,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = CellFlag;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct CellFlagParser {
        _priv: (),
    }

    impl CellFlagParser {
        pub fn new() -> CellFlagParser {
            CellFlagParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<CellFlag, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<CellFlag,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                // __CellFlag = CellFlag => ActionFn(10);
                let __sym0 = __pop_Variant6(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action10::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__CellFlag::CellFlagParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__CellOption {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 6, 25,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 6, 29,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, -29, -29,
        // State 12
        0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, -100, -100,
        // State 13
        0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, -101, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, -101, -101,
        // State 14
        0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, -23, -23,
        // State 15
        0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, -22, -22,
        // State 16
        0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, -21, -21,
        // State 17
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, -30, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30,
        // State 19
        0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, -31, -31,
        // State 20
        0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, -99, -99,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108,
        // State 24
        0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, -104, -104,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        0, 10, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109,
        // State 28
        0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, -105, -105,
        // State 29
        0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, -102, -102,
        // State 30
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, -103, -103,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        -126,
        // State 11
        -29,
        // State 12
        -100,
        // State 13
        -101,
        // State 14
        -23,
        // State 15
        -22,
        // State 16
        -21,
        // State 17
        -16,
        // State 18
        -30,
        // State 19
        -31,
        // State 20
        -99,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        -104,
        // State 25
        -15,
        // State 26
        0,
        // State 27
        0,
        // State 28
        -105,
        // State 29
        -102,
        // State 30
        0,
        // State 31
        -103,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            7 => 4,
            8 => 10,
            11 => match state {
                6 => 25,
                _ => 12,
            },
            13 => match state {
                1 => 3,
                4 => 6,
                _ => 13,
            },
            14 => match state {
                7 => 26,
                9 => 30,
                _ => 14,
            },
            15 => 15,
            36 => 16,
            37 => match state {
                5 => 23,
                8 => 27,
                _ => 17,
            },
            39 => 8,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = CellOption;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct CellOptionParser {
        _priv: (),
    }

    impl CellOptionParser {
        pub fn new() -> CellOptionParser {
            CellOptionParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<CellOption, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<CellOption,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                // __CellOption = CellOption => ActionFn(11);
                let __sym0 = __pop_Variant7(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action11::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__CellOption::CellOptionParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Const {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -127,
        // State 2
        -23,
        // State 3
        -22,
        // State 4
        -21,
        // State 5
        -30,
        // State 6
        -31,
        // State 7
        -99,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            11 => 1,
            14 => 2,
            15 => 3,
            36 => 4,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = Const;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct ConstParser {
        _priv: (),
    }

    impl ConstParser {
        pub fn new() -> ConstParser {
            ConstParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<Const, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<Const,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                // __Const = Const => ActionFn(4);
                let __sym0 = __pop_Variant9(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action4::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__Const::ConstParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Design {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, -24, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 3, 0, 0, -6, 9, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 10, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 3, 0, 0, -6, 9, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 10, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 22, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 25, 26, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 94, 29, 0, 0, 0,
        // State 14
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 97,
        // State 16
        0, 0, 0, 0, 0, 0, -40, 0, 0, -40, -40, 0, -40, 0, 0, 0, 0, 0, 0, 74, 79, 0, -40, 0, 0, 0, 0, -40, 0, -40, 0, 80, 0, 0, 0, 0, 0, 0, 0, -40, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 22, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 35, 3, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 36, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 25, 26, 0, 0, 0, 0, 0, 0, 27, 28, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 94, 29, 0, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 118,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 35, 3, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 36, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 35
        0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 45, 0, 46, 47, 0, 48, 0, 0, 0, 0, 49, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 57, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 57, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 57, 0, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, 57, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 30, 0, 0, 0, 3, 0, -6, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 57, 0, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 57, 0, 0, 0, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, 57, 0, 0, 0, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 57, 0, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, 0, 3, 0, -6, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        // State 64
        0, 0, 0, 0, 0, -74, -74, 0, -74, 0, 0, 0, -74, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, -74, 0, 0, 0, 0, 0, 16, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, -76, -76, 0, -76, 0, 0, 0, -76, 0, 0, 72, 0, 0, 0, 74, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, -76, 0, 0, 0, 0, 0, 16, 0,
        // State 67
        0, 0, 0, 0, 0, 35, 3, 0, -67, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 35, 3, 0, -68, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, -25, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 71
        -29, 0, -29, 0, 0, -29, -29, 0, -29, -29, -29, 0, -29, 0, 0, -29, 0, 0, 0, -29, -29, 0, -29, 0, 0, 0, 0, -29, 0, -29, 0, -29, 0, 0, -29, -29, -29, 0, 0, -29, -29, -29,
        // State 72
        0, 0, 0, 0, 0, 0, -26, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        -30, -30, -30, -30, 0, -30, -30, -30, -30, -30, -30, 0, -30, 0, 0, -30, 0, -30, -30, -30, -30, 0, -30, -30, 0, -30, -30, -30, 0, -30, 0, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
        // State 74
        0, 0, 0, 0, 0, -7, -7, -7, -7, -7, -7, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, -7, 0, 0, 0, -7, 0, -7, 0, 0, 0, 0, -7, -7, 0, 0, 0, -7, 0, 0,
        // State 75
        -23, 0, -23, 0, 0, -23, -23, -23, -23, -23, -23, 0, -23, 0, 0, -23, 0, 0, 0, -23, -23, 0, -23, -23, 0, 0, 0, -23, 0, -23, 0, -23, 0, 0, -23, -23, -23, 0, 0, -23, -23, -23,
        // State 76
        -22, 0, -22, 0, 0, -22, -22, -22, -22, -22, -22, 0, -22, 0, 0, -22, 0, 0, 0, -22, -22, 0, -22, -22, 0, 0, 0, -22, 0, -22, 0, -22, 0, 0, -22, -22, -22, 0, 0, -22, -22, -22,
        // State 77
        -21, 0, -21, 0, 0, -21, -21, -21, -21, -21, -21, 0, -21, 0, 0, -21, 0, 0, 0, -21, -21, 0, -21, -21, 0, 0, 0, -21, 0, -21, 0, -21, 0, 0, -21, -21, -21, 0, 0, -21, -21, -21,
        // State 78
        -31, 0, -31, 0, 0, -31, -31, -31, -31, -31, -31, 0, -31, 0, 0, -31, 0, 0, 0, -31, -31, 0, -31, -31, 0, 0, 0, -31, 0, -31, 0, -31, 0, 0, -31, -31, -31, 0, 0, -31, -31, -31,
        // State 79
        -99, 0, -99, 0, 0, -99, -99, -99, -99, -99, -99, 0, -99, 0, 0, -99, 0, 0, 0, -99, -99, 0, -99, -99, 0, 0, 0, -99, 0, -99, 0, -99, 0, 0, -99, -99, -99, 0, 0, -99, -99, -99,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, -39, 0, 0, -39, -39, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, -39, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0,
        // State 82
        0, 0, 0, 0, 0, 0, -55, 0, 0, -55, -55, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, -55, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, -27, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, -56, 0, 0, -56, -56, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, -56, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0,
        // State 85
        0, 0, 0, 0, 0, 0, -28, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        -100, 0, -100, 0, 0, -100, -100, 0, -100, -100, -100, 0, -100, 0, 0, -100, 0, 0, 0, -100, -100, 0, -100, 0, 0, 0, 0, -100, 0, -100, 0, -100, 0, 0, -100, -100, -100, 0, 0, -100, -100, -100,
        // State 87
        -101, 0, -101, 0, 0, -101, -101, 0, -101, -101, -101, 0, -101, 0, 0, -101, 0, 0, 0, -101, -101, 0, -101, 0, 0, 0, 0, -101, 0, -101, 0, -101, 0, 0, -101, -101, -101, 0, 0, -101, -101, -101,
        // State 88
        0, 0, 0, 0, 0, 0, -44, 0, 0, -44, -44, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, -44, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, -37, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, -42, 0, 0, -42, -42, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, -42, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, -121, -121, 0, 0, 0, 0, 0, 0, -121, -121, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, -121, -121, 0, 0, 0,
        // State 92
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, 0, -114, -114, 0, 0, 0, 0, 0, 0, -114, -114, 0, 0, 0, 0, 0, -114, 0, 0, 0, 0, -114, -114, 0, 0, 0,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, 0, -113, -113, 0, 0, 0, 0, 0, 0, -113, -113, 0, 0, 0, 0, 0, -113, 0, 0, 0, 0, -113, -113, 0, 0, 0,
        // State 94
        0, 0, 30, 0, 0, 0, -52, 0, 0, -52, -52, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, -52, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0,
        // State 95
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108,
        // State 96
        -104, 0, -104, 0, 0, -104, -104, 0, -104, -104, -104, 0, -104, 0, 0, -104, 0, 0, 0, -104, -104, 0, -104, 0, 0, 0, 0, -104, 0, -104, 0, -104, 0, 0, -104, -104, -104, 0, 0, -104, -104, -104,
        // State 97
        0, 0, 0, 0, 0, 0, -41, 0, 0, -41, -41, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, -41, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, -45, 0, 0, -45, -45, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, -45, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, -38, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, -33, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, -34, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, -32, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        0, 0, 0, 0, 0, -57, -57, 0, -57, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, -57, 0, 0, 0, 0, 0, 0,
        // State 105
        0, 0, 0, 0, 0, -65, -65, 0, -65, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, -65, 0, 0, 0, 0, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0,
        // State 107
        0, 0, 0, 0, 0, 0, -48, 0, 0, -48, -48, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, -48, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0,
        // State 108
        0, 0, 0, 0, 0, 0, -43, 0, 0, -43, -43, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, -43, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, -122, -122, 0, 0, 0, 0, 0, 0, -122, -122, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, -122, -122, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, 0, -118, -118, 0, 0, 0, 0, 0, 0, -118, -118, 0, 0, 0, 0, 0, -118, 0, 0, 0, 0, -118, -118, 0, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, 0, -116, -116, 0, 0, 0, 0, 0, 0, -116, -116, 0, 0, 0, 0, 0, -116, 0, 0, 0, 0, -116, -116, 0, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, 0, -115, -115, 0, 0, 0, 0, 0, 0, -115, -115, 0, 0, 0, 0, 0, -115, 0, 0, 0, 0, -115, -115, 0, 0, 0,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, -117, -117, 0, 0, 0, 0, 0, 0, -117, -117, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, -117, -117, 0, 0, 0,
        // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, 0, -112, -112, 0, 0, 0, 0, 0, 0, -112, -112, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, -112, -112, 0, 0, 0,
        // State 115
        0, 52, 0, 125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109,
        // State 117
        -105, 0, -105, 0, 0, -105, -105, 0, -105, -105, -105, 0, -105, 0, 0, -105, 0, 0, 0, -105, -105, 0, -105, 0, 0, 0, 0, -105, 0, -105, 0, -105, 0, 0, -105, -105, -105, 0, 0, -105, -105, -105,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 119
        0, 0, 0, 0, 0, 0, -46, 0, 0, -46, -46, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, -46, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0,
        // State 120
        0, 0, 0, 0, 0, -66, -66, 0, -66, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, -66, 0, 0, 0, 0, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, -50, 0, 0, -50, -50, 0, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, -50, 0, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0,
        // State 123
        0, 0, 0, 0, 0, 0, -49, 0, 0, -49, -49, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, -49, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, 0, 0,
        // State 124
        -102, 0, -102, 0, 0, -102, -102, 0, -102, -102, -102, 0, -102, 0, 0, -102, 0, 0, 0, -102, -102, 0, -102, 0, 0, 0, 0, -102, 0, -102, 0, -102, 0, 0, -102, -102, -102, 0, 0, -102, -102, -102,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, -47, 0, 0, -47, -47, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, -47, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, -51, 0, 0, -51, -51, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, -51, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0,
        // State 128
        0, 0, 30, 0, 0, -62, -62, 0, -62, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, -62, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, -97, 0, 0, 0, 0, 0,
        // State 130
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, 0, 0, 0, 0, 0,
        // State 131
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, -90, 0, 0, 0, 0, 0,
        // State 132
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, -89, 0, 0, 0, 0, 0,
        // State 133
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, -92, 0, 0, 0, 0, 0,
        // State 134
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, -91, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, -16, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, -10, 0, -10, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        0, 0, 0, 0, 0, -58, -58, 0, -58, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, 0, 0, 0, 0, 0, 0,
        // State 143
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, -98, 0, 0, 0, 0, 0,
        // State 144
        -103, 0, -103, 0, 0, -103, -103, 0, -103, -103, -103, 0, -103, 0, 0, -103, 0, 0, 0, -103, -103, 0, -103, 0, 0, 0, 0, -103, 0, -103, 0, -103, 0, 0, -103, -103, -103, 0, 0, -103, -103, -103,
        // State 145
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, -11, 0, -11, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        0, 0, 0, 0, 0, -60, -60, 0, -60, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, -60, 0, 0, 0, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, -72, 0, 0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, -59, -59, 0, -59, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, -59, 0, 0, 0, 0, 0, 0,
        // State 150
        0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, 0, 0, 0, 0, 0,
        // State 151
        155, 0, 30, 0, 0, -73, -73, 0, -73, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0,
        // State 152
        0, 0, 0, 0, 0, -61, -61, 0, -61, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, -61, 0, 0, 0, 0, 0, 0,
        // State 153
        156, 0, 30, 0, 0, -75, -75, 0, -75, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, -4, -4, 0, -4, 0, 0, 0, -4, 0, 0, -4, 0, 0, 0, -4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, -4, 0, 0, 0, 0, 0, -4, 0,
        // State 155
        0, 0, 0, 0, 0, -5, -5, 0, -5, 0, 0, 0, -5, 0, 0, -5, 0, 0, 0, -5, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, -5, 0, 0, 0, 0, 0, -5, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -24,
        // State 1
        -128,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        -25,
        // State 71
        0,
        // State 72
        -26,
        // State 73
        -30,
        // State 74
        -7,
        // State 75
        -23,
        // State 76
        -22,
        // State 77
        -21,
        // State 78
        -31,
        // State 79
        -99,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        -27,
        // State 84
        0,
        // State 85
        -28,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        0,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => 66,
            3 => match state {
                1 => 69,
                6..=7 => 80,
                54 | 61..=62 | 65 => 139,
                _ => 103,
            },
            4 => match state {
                1 => 70,
                6..=7 => 81,
                54 => 140,
                61 => 146,
                _ => 104,
            },
            6 => 61,
            7 => 53,
            8 => match state {
                36 => 125,
                _ => 118,
            },
            10 => 36,
            11 => match state {
                5 => 74,
                16 => 97,
                60 => 145,
                _ => 86,
            },
            12 => 1,
            13 => match state {
                2 => 5,
                4 => 6,
                9 => 16,
                10 => 17,
                12 => 22,
                17 => 31,
                37 => 52,
                53 => 60,
                11 => 88,
                13 => 90,
                18 => 98,
                23 => 108,
                _ => 87,
            },
            14 => match state {
                3 => 72,
                19 => 100,
                20 => 101,
                21 => 102,
                24 => 110,
                25 => 111,
                26 => 112,
                27 => 113,
                28 => 114,
                29 => 115,
                51 => 135,
                _ => 75,
            },
            15 => 76,
            16 => match state {
                18 => 99,
                _ => 89,
            },
            18 => 18,
            19 => match state {
                7 => 84,
                _ => 82,
            },
            21 => 7,
            22 => match state {
                32 | 68 => 120,
                _ => 105,
            },
            24 => match state {
                67 => 68,
                _ => 32,
            },
            25 => match state {
                62 | 65 => 148,
                _ => 141,
            },
            27 => match state {
                61 => 65,
                _ => 62,
            },
            28 => 67,
            29 => match state {
                33 | 40 => 122,
                _ => 106,
            },
            31 => match state {
                32 => 40,
                _ => 33,
            },
            32 => 42,
            33 => match state {
                55 | 57..=59 => 143,
                _ => 129,
            },
            35 => match state {
                43 => 57,
                45 => 58,
                47 => 59,
                _ => 55,
            },
            36 => 77,
            37 => match state {
                34 => 41,
                39 => 54,
                56 => 63,
                14 => 94,
                15 => 95,
                30 => 116,
                41 => 128,
                44 => 130,
                46 => 131,
                48 => 132,
                49 => 133,
                50 => 134,
                52 => 136,
                63 => 150,
                64 => 151,
                66 => 153,
                _ => 14,
            },
            39 => 30,
            41 => match state {
                23 => 109,
                _ => 91,
            },
            43 => 23,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = Design;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct DesignParser {
        _priv: (),
    }

    impl DesignParser {
        pub fn new() -> DesignParser {
            DesignParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<Design, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<Design,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                // __Design = Design => ActionFn(19);
                let __sym0 = __pop_Variant10(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action19::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__Design::DesignParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Ident {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -129,
        // State 2
        -29,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            13 => 1,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = String;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct IdentParser {
        _priv: (),
    }

    impl IdentParser {
        pub fn new() -> IdentParser {
            IdentParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<String, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<String,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                // __Ident = Ident => ActionFn(0);
                let __sym0 = __pop_Variant11(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__Ident::IdentParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Int {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -130,
        // State 2
        -30,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            14 => 1,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = i64;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct IntParser {
        _priv: (),
    }

    impl IntParser {
        pub fn new() -> IntParser {
            IntParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<i64, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<i64,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                // __Int = Int => ActionFn(2);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action2::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__Int::IntParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Lit {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -131,
        // State 2
        -31,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            15 => 1,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = String;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct LitParser {
        _priv: (),
    }

    impl LitParser {
        pub fn new() -> LitParser {
            LitParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<String, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<String,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                // __Lit = Lit => ActionFn(1);
                let __sym0 = __pop_Variant11(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action1::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__Lit::LitParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__MemoryOption {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        -132,
        // State 5
        -33,
        // State 6
        -30,
        // State 7
        -34,
        // State 8
        -32,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            14 => match state {
                2 => 7,
                3 => 8,
                _ => 5,
            },
            16 => 4,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = MemoryOption;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct MemoryOptionParser {
        _priv: (),
    }

    impl MemoryOptionParser {
        pub fn new() -> MemoryOptionParser {
            MemoryOptionParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<MemoryOption, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<MemoryOption,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                // __MemoryOption = MemoryOption => ActionFn(9);
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action9::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__MemoryOption::MemoryOptionParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__ModuleStmt {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 2, 0, 0, -6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 4, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 17, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 20, 21, 0, 0, 0, 0, 0, 0, 22, 23, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 82, 24, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 86,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 17, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 30, 2, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 31, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 20, 21, 0, 0, 0, 0, 0, 0, 22, 23, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 82, 24, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 107,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 30, 2, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 31, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 30
        0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 40, 0, 41, 42, 0, 43, 0, 0, 0, 0, 44, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0,
        // State 36
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 52, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 52, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 52, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81, 52, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 25, 0, 0, 0, 2, 0, -6, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 52, 0, 0, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 52, 0, 0, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, 52, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 52, 0, 0, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, 2, 0, -6, 0, 0, 0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
        // State 59
        0, 0, 0, 0, 0, -74, -74, 0, -74, 0, 0, 0, -74, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, -74, 0, 0, 0, 0, 0, 11, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, -76, -76, 0, -76, 0, 0, 0, -76, 0, 0, 68, 0, 0, 0, 74, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, -76, 0, 0, 0, 0, 0, 11, 0,
        // State 62
        0, 0, 0, 0, 0, 30, 2, 0, -67, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 0, 0, 0, 30, 2, 0, -68, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 67
        -29, 0, -29, 0, 0, -29, -29, 0, -29, 0, -29, 0, -29, 0, 0, -29, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, -29, 0, 0, -29, -29, -29, 0, 0, 0, -29, -29,
        // State 68
        -100, 0, -100, 0, 0, -100, -100, 0, -100, 0, -100, 0, -100, 0, 0, -100, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, -100, 0, 0, -100, -100, -100, 0, 0, 0, -100, -100,
        // State 69
        -101, 0, -101, 0, 0, -101, -101, 0, -101, 0, -101, 0, -101, 0, 0, -101, 0, 0, 0, -101, -101, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, -101, 0, 0, -101, -101, -101, 0, 0, 0, -101, -101,
        // State 70
        -23, 0, -23, 0, 0, -23, -23, 0, -23, 0, -23, 0, -23, 0, 0, -23, 0, 0, 0, -23, -23, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, -23, 0, 0, -23, -23, -23, 0, 0, 0, -23, -23,
        // State 71
        -22, 0, -22, 0, 0, -22, -22, 0, -22, 0, -22, 0, -22, 0, 0, -22, 0, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, -22, 0, 0, -22, -22, -22, 0, 0, 0, -22, -22,
        // State 72
        -21, 0, -21, 0, 0, -21, -21, 0, -21, 0, -21, 0, -21, 0, 0, -21, 0, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, -21, 0, 0, -21, -21, -21, 0, 0, 0, -21, -21,
        // State 73
        -30, -30, -30, -30, 0, -30, -30, 0, -30, 0, -30, 0, -30, 0, 0, -30, 0, -30, -30, -30, -30, 0, 0, 0, 0, -30, -30, -30, 0, 0, 0, -30, -30, -30, -30, -30, -30, -30, -30, 0, -30, -30,
        // State 74
        -31, 0, -31, 0, 0, -31, -31, 0, -31, 0, -31, 0, -31, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, -31, 0, 0, -31, -31, -31, 0, 0, 0, -31, -31,
        // State 75
        -99, 0, -99, 0, 0, -99, -99, 0, -99, 0, -99, 0, -99, 0, 0, -99, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, -99, 0, 0, -99, -99, -99, 0, 0, 0, -99, -99,
        // State 76
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, -37, 0, 0, 0,
        // State 78
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, -121, -121, 0, 0, 0, 0, 0, 0, -121, -121, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, -121, -121, 0, 0, 0,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, 0, -114, -114, 0, 0, 0, 0, 0, 0, -114, -114, 0, 0, 0, 0, 0, -114, 0, 0, 0, 0, -114, -114, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, 0, -113, -113, 0, 0, 0, 0, 0, 0, -113, -113, 0, 0, 0, 0, 0, -113, 0, 0, 0, 0, -113, -113, 0, 0, 0,
        // State 82
        0, 0, 0, 0, 0, -7, -7, 0, -7, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, -7, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108,
        // State 85
        -104, 0, -104, 0, 0, -104, -104, 0, -104, 0, -104, 0, -104, 0, 0, -104, 0, 0, 0, -104, -104, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, -104, 0, 0, -104, -104, -104, 0, 0, 0, -104, -104,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, -38, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, -33, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, -34, 0, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, -32, 0, 0, 0,
        // State 92
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0,
        // State 93
        0, 0, 0, 0, 0, -57, -57, 0, -57, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, -57, 0, 0, 0, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, -65, -65, 0, -65, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, -65, 0, 0, 0, 0, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, -122, -122, 0, 0, 0, 0, 0, 0, -122, -122, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, -122, -122, 0, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, 0, -118, -118, 0, 0, 0, 0, 0, 0, -118, -118, 0, 0, 0, 0, 0, -118, 0, 0, 0, 0, -118, -118, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, 0, -116, -116, 0, 0, 0, 0, 0, 0, -116, -116, 0, 0, 0, 0, 0, -116, 0, 0, 0, 0, -116, -116, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, 0, -115, -115, 0, 0, 0, 0, 0, 0, -115, -115, 0, 0, 0, 0, 0, -115, 0, 0, 0, 0, -115, -115, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, -117, -117, 0, 0, 0, 0, 0, 0, -117, -117, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, -117, -117, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -112, 0, -112, -112, 0, 0, 0, 0, 0, 0, -112, -112, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, -112, -112, 0, 0, 0,
        // State 104
        0, 47, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 105
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109,
        // State 106
        -105, 0, -105, 0, 0, -105, -105, 0, -105, 0, -105, 0, -105, 0, 0, -105, 0, 0, 0, -105, -105, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, -105, 0, 0, -105, -105, -105, 0, 0, 0, -105, -105,
        // State 107
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 108
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        0, 0, 0, 0, 0, -66, -66, 0, -66, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, -66, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 113
        -102, 0, -102, 0, 0, -102, -102, 0, -102, 0, -102, 0, -102, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, -102, 0, 0, -102, -102, -102, 0, 0, 0, -102, -102,
        // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        0, 0, 25, 0, 0, -62, -62, 0, -62, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, -62, 0, 0, 0, 0, 0, 0,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, -97, 0, 0, 0, 0, 0,
        // State 119
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, 0, 0, 0, 0, 0,
        // State 120
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, -90, 0, 0, 0, 0, 0,
        // State 121
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, -89, 0, 0, 0, 0, 0,
        // State 122
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, -92, 0, 0, 0, 0, 0,
        // State 123
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, -91, 0, 0, 0, 0, 0,
        // State 124
        0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, -16, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, -13, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, -10, 0, -10, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 0, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 131
        0, 0, 0, 0, 0, -58, -58, 0, -58, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, -58, 0, 0, 0, 0, 0, 0,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, -98, 0, 0, 0, 0, 0,
        // State 133
        -103, 0, -103, 0, 0, -103, -103, 0, -103, 0, -103, 0, -103, 0, 0, -103, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, -103, 0, 0, -103, -103, -103, 0, 0, 0, -103, -103,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, -11, 0, -11, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, -60, -60, 0, -60, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, -60, 0, 0, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, -72, 0, 0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, -59, -59, 0, -59, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, -59, 0, 0, 0, 0, 0, 0,
        // State 139
        0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, -94, 0, 0, 0, 0, 0,
        // State 140
        144, 0, 25, 0, 0, -73, -73, 0, -73, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, -61, -61, 0, -61, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, -61, 0, 0, 0, 0, 0, 0,
        // State 142
        145, 0, 25, 0, 0, -75, -75, 0, -75, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0,
        // State 143
        0, 0, 0, 0, 0, -4, -4, 0, -4, 0, 0, 0, -4, 0, 0, -4, 0, 0, 0, -4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, -4, 0, 0, 0, 0, 0, -4, 0,
        // State 144
        0, 0, 0, 0, 0, -5, -5, 0, -5, 0, 0, 0, -5, 0, 0, -5, 0, 0, 0, -5, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, -5, 0, 0, 0, 0, 0, -5, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        -40,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        -39,
        // State 66
        -133,
        // State 67
        -29,
        // State 68
        -100,
        // State 69
        -101,
        // State 70
        -23,
        // State 71
        -22,
        // State 72
        -21,
        // State 73
        -30,
        // State 74
        -31,
        // State 75
        -99,
        // State 76
        -44,
        // State 77
        0,
        // State 78
        -42,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        -7,
        // State 83
        -52,
        // State 84
        0,
        // State 85
        -104,
        // State 86
        -41,
        // State 87
        -45,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        -48,
        // State 97
        -43,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        -105,
        // State 107
        0,
        // State 108
        -46,
        // State 109
        0,
        // State 110
        -50,
        // State 111
        0,
        // State 112
        -49,
        // State 113
        -102,
        // State 114
        0,
        // State 115
        -47,
        // State 116
        -51,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        -103,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        0,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => 61,
            3 => match state {
                0 => 64,
                49 | 56..=57 | 60 => 128,
                _ => 92,
            },
            4 => match state {
                0 => 65,
                49 => 129,
                56 => 135,
                _ => 93,
            },
            6 => 56,
            7 => 48,
            8 => match state {
                31 => 114,
                _ => 107,
            },
            10 => 31,
            11 => match state {
                8 => 82,
                11 => 86,
                55 => 134,
                _ => 68,
            },
            13 => match state {
                1 => 8,
                3 => 11,
                4 => 12,
                6 => 17,
                12 => 26,
                32 => 47,
                48 => 55,
                5 => 76,
                7 => 78,
                13 => 87,
                18 => 97,
                _ => 69,
            },
            14 => match state {
                14 => 89,
                15 => 90,
                16 => 91,
                19 => 99,
                20 => 100,
                21 => 101,
                22 => 102,
                23 => 103,
                24 => 104,
                46 => 124,
                _ => 70,
            },
            15 => 71,
            16 => match state {
                13 => 88,
                _ => 77,
            },
            18 => 13,
            19 => 66,
            22 => match state {
                27 | 63 => 109,
                _ => 94,
            },
            24 => match state {
                62 => 63,
                _ => 27,
            },
            25 => match state {
                57 | 60 => 137,
                _ => 130,
            },
            27 => match state {
                56 => 60,
                _ => 57,
            },
            28 => 62,
            29 => match state {
                28 | 35 => 111,
                _ => 95,
            },
            31 => match state {
                27 => 35,
                _ => 28,
            },
            32 => 37,
            33 => match state {
                50 | 52..=54 => 132,
                _ => 118,
            },
            35 => match state {
                38 => 52,
                40 => 53,
                42 => 54,
                _ => 50,
            },
            36 => 72,
            37 => match state {
                29 => 36,
                34 => 49,
                51 => 58,
                9 => 83,
                10 => 84,
                25 => 105,
                36 => 117,
                39 => 119,
                41 => 120,
                43 => 121,
                44 => 122,
                45 => 123,
                47 => 125,
                58 => 139,
                59 => 140,
                61 => 142,
                _ => 9,
            },
            39 => 25,
            41 => match state {
                18 => 98,
                _ => 79,
            },
            43 => 18,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = ModuleStmt;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct ModuleStmtParser {
        _priv: (),
    }

    impl ModuleStmtParser {
        pub fn new() -> ModuleStmtParser {
            ModuleStmtParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<ModuleStmt, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<ModuleStmt,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                // __ModuleStmt = ModuleStmt => ActionFn(18);
                let __sym0 = __pop_Variant15(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action18::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__ModuleStmt::ModuleStmtParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__ProcessStmt {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0,
        // State 4
        0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 6, 33,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 9, 0, 0, 0, 3, 0, -6, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 6, 41,
        // State 10
        0, 0, 0, 0, 0, 0, 3, 0, -6, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, -74, -74, 0, -74, 0, 0, 0, -74, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, -74, 0, 0, 0, 0, 0, 6, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, -76, -76, 0, -76, 0, 0, 0, -76, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, -76, 0, 0, 0, 0, 0, 6, 0,
        // State 16
        0, 0, 0, 0, 0, 2, 3, 0, -67, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 2, 3, 0, -68, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, -57, -57, 0, -57, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        -100, 0, -100, 0, 0, -100, -100, 0, -100, 0, 0, 0, -100, 0, 0, -100, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, -100, 0, 0, 0, 0, 0, -100, -100,
        // State 22
        -101, 0, -101, 0, 0, -101, -101, 0, -101, 0, 0, 0, -101, 0, 0, -101, 0, 0, 0, -101, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, -101, 0, 0, 0, 0, 0, -101, -101,
        // State 23
        -23, 0, -23, 0, 0, -23, -23, 0, -23, 0, 0, 0, -23, 0, 0, -23, 0, 0, 0, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, -23, 0, 0, 0, 0, 0, -23, -23,
        // State 24
        -22, 0, -22, 0, 0, -22, -22, 0, -22, 0, 0, 0, -22, 0, 0, -22, 0, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, -22, 0, 0, 0, 0, 0, -22, -22,
        // State 25
        -21, 0, -21, 0, 0, -21, -21, 0, -21, 0, 0, 0, -21, 0, 0, -21, 0, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, -21, 0, 0, 0, 0, 0, -21, -21,
        // State 26
        -29, 0, -29, 0, 0, -29, -29, 0, -29, 0, 0, 0, -29, 0, 0, -29, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, -29, 0, 0, 0, 0, 0, -29, -29,
        // State 27
        -30, -30, -30, -30, 0, -30, -30, 0, -30, 0, 0, 0, -30, 0, 0, -30, 0, 0, 0, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, -30, 0, 0, 0, 0, 0, -30, -30,
        // State 28
        -31, 0, -31, 0, 0, -31, -31, 0, -31, 0, 0, 0, -31, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, -31, 0, 0, 0, 0, 0, -31, -31,
        // State 29
        -99, 0, -99, 0, 0, -99, -99, 0, -99, 0, 0, 0, -99, 0, 0, -99, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, -99, 0, 0, 0, 0, 0, -99, -99,
        // State 30
        0, 0, 9, 0, 0, -62, -62, 0, -62, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108,
        // State 32
        -104, 0, -104, 0, 0, -104, -104, 0, -104, 0, 0, 0, -104, 0, 0, -104, 0, 0, 0, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, -104, 0, 0, 0, 0, 0, -104, -104,
        // State 33
        0, 0, 0, 0, 0, -7, -7, 0, -7, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, -10, 0, -10, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, -58, -58, 0, -58, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0,
        // State 38
        0, 15, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109,
        // State 40
        -105, 0, -105, 0, 0, -105, -105, 0, -105, 0, 0, 0, -105, 0, 0, -105, 0, 0, 0, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, -105, 0, 0, 0, 0, 0, -105, -105,
        // State 41
        0, 0, 0, 0, 0, 0, -11, 0, -11, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, -60, -60, 0, -60, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, -72, 0, 0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, -59, -59, 0, -59, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0,
        // State 45
        -102, 0, -102, 0, 0, -102, -102, 0, -102, 0, 0, 0, -102, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, -102, 0, 0, 0, 0, 0, -102, -102,
        // State 46
        52, 0, 9, 0, 0, -73, -73, 0, -73, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, -61, -61, 0, -61, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        54, 0, 9, 0, 0, -75, -75, 0, -75, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, -65, -65, 0, -65, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, -4, -4, 0, -4, 0, 0, 0, -4, 0, 0, -4, 0, 0, 0, -4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, -4, 0, 0, 0, 0, 0, -4, 0,
        // State 52
        -103, 0, -103, 0, 0, -103, -103, 0, -103, 0, 0, 0, -103, 0, 0, -103, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, -103, 0, 0, 0, 0, 0, -103, -103,
        // State 53
        0, 0, 0, 0, 0, -5, -5, 0, -5, 0, 0, 0, -5, 0, 0, -5, 0, 0, 0, -5, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, -5, 0, 0, 0, 0, 0, -5, 0,
        // State 54
        0, 0, 0, 0, 0, -66, -66, 0, -66, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        -57,
        // State 20
        -134,
        // State 21
        -100,
        // State 22
        -101,
        // State 23
        -23,
        // State 24
        -22,
        // State 25
        -21,
        // State 26
        -29,
        // State 27
        -30,
        // State 28
        -31,
        // State 29
        -99,
        // State 30
        -62,
        // State 31
        0,
        // State 32
        -104,
        // State 33
        -7,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        -58,
        // State 38
        0,
        // State 39
        0,
        // State 40
        -105,
        // State 41
        0,
        // State 42
        -60,
        // State 43
        0,
        // State 44
        -59,
        // State 45
        -102,
        // State 46
        0,
        // State 47
        -61,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        -103,
        // State 53
        0,
        // State 54
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => 15,
            3 => match state {
                0 | 16..=17 => 18,
                _ => 34,
            },
            4 => match state {
                7 => 35,
                10 => 41,
                _ => 19,
            },
            6 => 10,
            11 => match state {
                6 => 33,
                _ => 21,
            },
            13 => match state {
                2 => 6,
                _ => 22,
            },
            14 => match state {
                8 => 38,
                14 => 48,
                _ => 23,
            },
            15 => 24,
            22 => match state {
                16 => 50,
                17 => 54,
                _ => 20,
            },
            24 => 17,
            25 => match state {
                11 | 13 => 43,
                _ => 36,
            },
            27 => match state {
                10 => 13,
                _ => 11,
            },
            28 => 16,
            36 => 25,
            37 => match state {
                3 => 7,
                4 => 30,
                5 => 31,
                9 => 39,
                12 => 46,
                15 => 49,
                _ => 4,
            },
            39 => 9,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = ProcessStmt;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct ProcessStmtParser {
        _priv: (),
    }

    impl ProcessStmtParser {
        pub fn new() -> ProcessStmtParser {
            ProcessStmtParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<ProcessStmt, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<ProcessStmt,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                // __ProcessStmt = ProcessStmt => ActionFn(14);
                let __sym0 = __pop_Variant17(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action14::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__ProcessStmt::ProcessStmtParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__ProcessSwitchCase {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, -74, -74, 0, -74, 0, 0, 0, -74, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, -74, 0, 0, 0, 0, 0, 5, 0,
        // State 2
        0, 0, 0, 0, 0, -76, -76, 0, -76, 0, 0, 0, -76, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, -76, 0, 0, 0, 0, 0, 5, 0,
        // State 3
        0, 0, 0, 0, 0, 7, 8, 0, -67, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 5, 37,
        // State 5
        0, 0, 0, 0, 0, 7, 8, 0, -68, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 5, 42,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0,
        // State 11
        0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 9, 0, 0, 0, 8, 0, -6, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 8, 0, -6, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        -100, 0, -100, 0, 0, -100, -100, 0, -100, 0, 0, 0, -100, 0, 0, -100, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, -100, 0, 0, 0, 0, 0, -100, -100,
        // State 21
        -101, 0, -101, 0, 0, -101, -101, 0, -101, 0, 0, 0, -101, 0, 0, -101, 0, 0, 0, -101, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, -101, 0, 0, 0, 0, 0, -101, -101,
        // State 22
        -23, 0, -23, 0, 0, -23, -23, 0, -23, 0, 0, 0, -23, 0, 0, -23, 0, 0, 0, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, -23, 0, 0, 0, 0, 0, -23, -23,
        // State 23
        -22, 0, -22, 0, 0, -22, -22, 0, -22, 0, 0, 0, -22, 0, 0, -22, 0, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, -22, 0, 0, 0, 0, 0, -22, -22,
        // State 24
        -21, 0, -21, 0, 0, -21, -21, 0, -21, 0, 0, 0, -21, 0, 0, -21, 0, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, -21, 0, 0, 0, 0, 0, -21, -21,
        // State 25
        35, 0, 9, 0, 0, -73, -73, 0, -73, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        -29, 0, -29, 0, 0, -29, -29, 0, -29, 0, 0, 0, -29, 0, 0, -29, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, -29, 0, 0, 0, 0, 0, -29, -29,
        // State 27
        -30, -30, -30, -30, 0, -30, -30, 0, -30, 0, 0, 0, -30, 0, 0, -30, 0, 0, 0, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, -30, 0, 0, 0, 0, 0, -30, -30,
        // State 28
        -31, 0, -31, 0, 0, -31, -31, 0, -31, 0, 0, 0, -31, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, -31, 0, 0, 0, 0, 0, -31, -31,
        // State 29
        -99, 0, -99, 0, 0, -99, -99, 0, -99, 0, 0, 0, -99, 0, 0, -99, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, -99, 0, 0, 0, 0, 0, -99, -99,
        // State 30
        38, 0, 9, 0, 0, -75, -75, 0, -75, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, -57, -57, 0, -57, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, -65, -65, 0, -65, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, -4, -4, 0, -4, 0, 0, 0, -4, 0, 0, -4, 0, 0, 0, -4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, -4, 0, 0, 0, 0, 0, -4, 0,
        // State 35
        0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108,
        // State 36
        -104, 0, -104, 0, 0, -104, -104, 0, -104, 0, 0, 0, -104, 0, 0, -104, 0, 0, 0, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, -104, 0, 0, 0, 0, 0, -104, -104,
        // State 37
        0, 0, 0, 0, 0, -5, -5, 0, -5, 0, 0, 0, -5, 0, 0, -5, 0, 0, 0, -5, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, -5, 0, 0, 0, 0, 0, -5, 0,
        // State 38
        0, 0, 0, 0, 0, -66, -66, 0, -66, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 15, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 40
        0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109,
        // State 41
        -105, 0, -105, 0, 0, -105, -105, 0, -105, 0, 0, 0, -105, 0, 0, -105, 0, 0, 0, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, -105, 0, 0, 0, 0, 0, -105, -105,
        // State 42
        0, 0, 9, 0, 0, -62, -62, 0, -62, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, -7, -7, 0, -7, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        -102, 0, -102, 0, 0, -102, -102, 0, -102, 0, 0, 0, -102, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, -102, 0, 0, 0, 0, 0, -102, -102,
        // State 45
        0, 0, 0, 0, 0, 0, -10, 0, -10, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, -71, 0, 0, 0, -71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, -58, -58, 0, -58, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, -11, 0, -11, 0, 0, 0, -11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, -60, -60, 0, -60, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, -72, 0, 0, 0, -72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, -59, -59, 0, -59, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        -103, 0, -103, 0, 0, -103, -103, 0, -103, 0, 0, 0, -103, 0, 0, -103, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, -103, 0, 0, 0, 0, 0, -103, -103,
        // State 54
        0, 0, 0, 0, 0, -61, -61, 0, -61, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -74,
        // State 2
        -76,
        // State 3
        -67,
        // State 4
        0,
        // State 5
        -68,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        -135,
        // State 20
        -100,
        // State 21
        -101,
        // State 22
        -23,
        // State 23
        -22,
        // State 24
        -21,
        // State 25
        -73,
        // State 26
        -29,
        // State 27
        -30,
        // State 28
        -31,
        // State 29
        -99,
        // State 30
        -75,
        // State 31
        0,
        // State 32
        -57,
        // State 33
        -65,
        // State 34
        -4,
        // State 35
        0,
        // State 36
        -104,
        // State 37
        -5,
        // State 38
        -66,
        // State 39
        0,
        // State 40
        0,
        // State 41
        -105,
        // State 42
        -62,
        // State 43
        -7,
        // State 44
        -102,
        // State 45
        0,
        // State 46
        0,
        // State 47
        -58,
        // State 48
        0,
        // State 49
        0,
        // State 50
        -60,
        // State 51
        0,
        // State 52
        -59,
        // State 53
        -103,
        // State 54
        -61,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => 2,
            3 => match state {
                3 | 5 => 31,
                _ => 18,
            },
            4 => match state {
                13 => 45,
                15 => 49,
                _ => 32,
            },
            6 => 15,
            11 => match state {
                12 => 43,
                _ => 20,
            },
            13 => match state {
                7 => 12,
                _ => 21,
            },
            14 => match state {
                8 => 39,
                14 => 48,
                _ => 22,
            },
            15 => 23,
            22 => match state {
                5 => 38,
                _ => 33,
            },
            24 => 5,
            25 => match state {
                0 => 19,
                16..=17 => 51,
                _ => 46,
            },
            27 => match state {
                15 => 17,
                _ => 16,
            },
            28 => 3,
            36 => 24,
            37 => match state {
                10 => 13,
                1 => 25,
                2 => 30,
                4 => 35,
                9 => 40,
                11 => 42,
                _ => 11,
            },
            39 => 9,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = ProcessSwitchCase;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct ProcessSwitchCaseParser {
        _priv: (),
    }

    impl ProcessSwitchCaseParser {
        pub fn new() -> ProcessSwitchCaseParser {
            ProcessSwitchCaseParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<ProcessSwitchCase, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<ProcessSwitchCase,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
                let __sym0 = __pop_Variant19(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action13::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__ProcessSwitchCase::ProcessSwitchCaseParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__ProcessSwitchCaseSigList {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 3, 21,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 3, 25,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        -100, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, -100, -100,
        // State 7
        -101, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, -101, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, -101, -101,
        // State 8
        -23, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, -23, -23,
        // State 9
        -22, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, -22, -22,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        -21, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, -21, -21,
        // State 12
        19, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        -29, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, -29, -29,
        // State 14
        -30, -30, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30,
        // State 15
        -31, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, -31, -31,
        // State 16
        -99, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, -99, -99,
        // State 17
        22, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, -4, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0,
        // State 19
        0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108,
        // State 20
        -104, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, -104, -104,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, -5, -5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0, -5, 0,
        // State 22
        0, 6, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109,
        // State 24
        -105, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, -105, -105,
        // State 25
        -102, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, -102, -102,
        // State 26
        0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 27
        -103, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, -103, -103,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -74,
        // State 1
        -76,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        -100,
        // State 7
        -101,
        // State 8
        -23,
        // State 9
        -22,
        // State 10
        -136,
        // State 11
        -21,
        // State 12
        -73,
        // State 13
        -29,
        // State 14
        -30,
        // State 15
        -31,
        // State 16
        -99,
        // State 17
        -75,
        // State 18
        -4,
        // State 19
        0,
        // State 20
        -104,
        // State 21
        -5,
        // State 22
        0,
        // State 23
        0,
        // State 24
        -105,
        // State 25
        -102,
        // State 26
        0,
        // State 27
        -103,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            2 => 1,
            11 => 6,
            13 => 7,
            14 => match state {
                3 => 22,
                5 => 26,
                _ => 8,
            },
            15 => 9,
            28 => 10,
            36 => 11,
            37 => match state {
                1 => 17,
                2 => 19,
                4 => 23,
                _ => 12,
            },
            39 => 4,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = Vec<SigSpec>;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct ProcessSwitchCaseSigListParser {
        _priv: (),
    }

    impl ProcessSwitchCaseSigListParser {
        pub fn new() -> ProcessSwitchCaseSigListParser {
            ProcessSwitchCaseSigListParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<Vec<SigSpec>, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<Vec<SigSpec>,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
                let __sym0 = __pop_Variant21(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action12::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__ProcessSwitchCaseSigList::ProcessSwitchCaseSigListParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__ProcessSync {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0, 6, 7, 0, 8, 0, 0, 0, 0, 9, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 15, 40,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 15, 44,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0,
        // State 23
        0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, -100, 0, 0, 0, -100, -100,
        // State 24
        0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, -101, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, -101, 0, 0, 0, -101, -101,
        // State 25
        0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, -23, 0, 0, 0, -23, -23,
        // State 26
        0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, -22, 0, 0, 0, -22, -22,
        // State 27
        0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, -21, 0, 0, 0, -21, -21,
        // State 28
        0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0,
        // State 29
        0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, 0, -29, 0, 0, 0, -29, -29,
        // State 30
        0, -30, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, -30, 0, 0, 0, -30, -30,
        // State 31
        0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, -31, 0, 0, 0, -31, -31,
        // State 32
        0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, -99, 0, 0, 0, -99, -99,
        // State 33
        0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, 0, 0,
        // State 36
        0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108,
        // State 39
        0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, -104, 0, 0, 0, -104, -104,
        // State 40
        0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0,
        // State 41
        0, 21, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109,
        // State 43
        0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, -105, 0, 0, 0, -105, -105,
        // State 44
        0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, -102, 0, 0, 0, -102, -102,
        // State 45
        0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, -103, 0, 0, 0, -103, -103,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        -83,
        // State 3
        -77,
        // State 4
        0,
        // State 5
        -79,
        // State 6
        0,
        // State 7
        -81,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        -84,
        // State 12
        0,
        // State 13
        -78,
        // State 14
        0,
        // State 15
        -80,
        // State 16
        -82,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        -137,
        // State 22
        -97,
        // State 23
        -100,
        // State 24
        -101,
        // State 25
        -23,
        // State 26
        -22,
        // State 27
        -21,
        // State 28
        -93,
        // State 29
        -29,
        // State 30
        -30,
        // State 31
        -31,
        // State 32
        -99,
        // State 33
        -90,
        // State 34
        -89,
        // State 35
        -92,
        // State 36
        -91,
        // State 37
        -98,
        // State 38
        0,
        // State 39
        -104,
        // State 40
        -94,
        // State 41
        0,
        // State 42
        0,
        // State 43
        -105,
        // State 44
        -102,
        // State 45
        0,
        // State 46
        -103,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            11 => 23,
            13 => 24,
            14 => match state {
                18 => 41,
                20 => 45,
                _ => 25,
            },
            15 => 26,
            29 => 21,
            32 => 2,
            33 => match state {
                11 | 13 | 15..=16 => 37,
                _ => 22,
            },
            35 => match state {
                3 => 13,
                5 => 15,
                7 => 16,
                _ => 11,
            },
            36 => 27,
            37 => match state {
                4 => 28,
                6 => 33,
                8 => 34,
                9 => 35,
                10 => 36,
                14 => 38,
                17 => 40,
                19 => 42,
                _ => 17,
            },
            39 => 19,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = ProcessSync;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct ProcessSyncParser {
        _priv: (),
    }

    impl ProcessSyncParser {
        pub fn new() -> ProcessSyncParser {
            ProcessSyncParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<ProcessSync, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<ProcessSync,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                // __ProcessSync = ProcessSync => ActionFn(17);
                let __sym0 = __pop_Variant22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action17::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__ProcessSync::ProcessSyncParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__ProcessSyncType {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 7, 27,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 7, 30,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, -100, -100,
        // State 12
        0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, -101, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, -101, -101,
        // State 13
        0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, -23, -23,
        // State 14
        0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, -22, -22,
        // State 15
        0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, -21, -21,
        // State 16
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, -29, -29,
        // State 18
        0, -30, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30,
        // State 19
        0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, -31, -31,
        // State 20
        0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, -99, -99,
        // State 21
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108,
        // State 26
        0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, -104, -104,
        // State 27
        0, 10, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109,
        // State 29
        0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, -105, -105,
        // State 30
        0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, -102, -102,
        // State 31
        0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, -103, -103,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        -138,
        // State 11
        -100,
        // State 12
        -101,
        // State 13
        -23,
        // State 14
        -22,
        // State 15
        -21,
        // State 16
        -93,
        // State 17
        -29,
        // State 18
        -30,
        // State 19
        -31,
        // State 20
        -99,
        // State 21
        -90,
        // State 22
        -89,
        // State 23
        -92,
        // State 24
        -91,
        // State 25
        0,
        // State 26
        -104,
        // State 27
        0,
        // State 28
        0,
        // State 29
        -105,
        // State 30
        -102,
        // State 31
        0,
        // State 32
        -103,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            11 => 11,
            13 => 12,
            14 => match state {
                7 => 27,
                9 => 31,
                _ => 13,
            },
            15 => 14,
            32 => 10,
            36 => 15,
            37 => match state {
                2 => 21,
                3 => 22,
                4 => 23,
                5 => 24,
                6 => 25,
                8 => 28,
                _ => 16,
            },
            39 => 8,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = ProcessSyncType;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct ProcessSyncTypeParser {
        _priv: (),
    }

    impl ProcessSyncTypeParser {
        pub fn new() -> ProcessSyncTypeParser {
            ProcessSyncTypeParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<ProcessSyncType, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<ProcessSyncType,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                // __ProcessSyncType = ProcessSyncType => ActionFn(15);
                let __sym0 = __pop_Variant24(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action15::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__ProcessSyncType::ProcessSyncTypeParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__ProcessSyncUpdate {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0,
        // State 2
        0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 4, 20,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 4, 23,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, -100, -100,
        // State 9
        0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, -101, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, -101, -101,
        // State 10
        0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, -23, -23,
        // State 11
        0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, -22, -22,
        // State 12
        0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, -21, -21,
        // State 13
        0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, -29, -29,
        // State 14
        0, -30, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30,
        // State 15
        0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, -31, -31,
        // State 16
        0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, -99, -99,
        // State 17
        0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108,
        // State 19
        0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, -104, -104,
        // State 20
        0, 7, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109,
        // State 22
        0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, -105, -105,
        // State 23
        0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, -102, -102,
        // State 24
        0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, -103, -103,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        -139,
        // State 8
        -100,
        // State 9
        -101,
        // State 10
        -23,
        // State 11
        -22,
        // State 12
        -21,
        // State 13
        -29,
        // State 14
        -30,
        // State 15
        -31,
        // State 16
        -99,
        // State 17
        -94,
        // State 18
        0,
        // State 19
        -104,
        // State 20
        0,
        // State 21
        0,
        // State 22
        -105,
        // State 23
        -102,
        // State 24
        0,
        // State 25
        -103,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            11 => 8,
            13 => 9,
            14 => match state {
                4 => 20,
                6 => 24,
                _ => 10,
            },
            15 => 11,
            33 => 7,
            36 => 12,
            37 => match state {
                2 => 17,
                3 => 18,
                5 => 21,
                _ => 2,
            },
            39 => 5,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = (SigSpec, SigSpec);
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct ProcessSyncUpdateParser {
        _priv: (),
    }

    impl ProcessSyncUpdateParser {
        pub fn new() -> ProcessSyncUpdateParser {
            ProcessSyncUpdateParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<(SigSpec, SigSpec), __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<(SigSpec, SigSpec),__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
                let __sym0 = __pop_Variant25(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action16::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__ProcessSyncUpdate::ProcessSyncUpdateParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Sig {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -140,
        // State 2
        -99,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            36 => 1,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = Signal;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct SigParser {
        _priv: (),
    }

    impl SigParser {
        pub fn new() -> SigParser {
            SigParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<Signal, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<Signal,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                // __Sig = Sig => ActionFn(3);
                let __sym0 = __pop_Variant27(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action3::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__Sig::SigParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__SigSpec {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 2, 17,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 2, 20,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, -100, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, -100, -100,
        // State 6
        0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, -101, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, -101, -101,
        // State 7
        0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, -23, -23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, 0, 0, 0, 0, 0, 0, 0, -23, -23,
        // State 8
        0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, -22, -22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, 0, 0, 0, 0, 0, 0, 0, -22, -22,
        // State 9
        0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, -21, -21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, 0, 0, 0, 0, 0, 0, 0, -21, -21,
        // State 10
        0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, -29, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, -29, -29,
        // State 12
        0, -30, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, -30, -30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30,
        // State 13
        0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, -31, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, -31, -31,
        // State 14
        0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, -99, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, -99, -99,
        // State 15
        0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, -108, -108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108, 0, 0, 0, 0, 0, 0, 0, 0, -108, -108,
        // State 16
        0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, -104, -104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -104, 0, 0, 0, 0, 0, 0, 0, 0, -104, -104,
        // State 17
        0, 5, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, -109, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, -109, -109,
        // State 19
        0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, -105, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, -105, -105,
        // State 20
        0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, -102, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, -102, -102,
        // State 21
        0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, -103, -103,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        -100,
        // State 6
        -101,
        // State 7
        -23,
        // State 8
        -22,
        // State 9
        -21,
        // State 10
        -141,
        // State 11
        -29,
        // State 12
        -30,
        // State 13
        -31,
        // State 14
        -99,
        // State 15
        0,
        // State 16
        -104,
        // State 17
        0,
        // State 18
        0,
        // State 19
        -105,
        // State 20
        -102,
        // State 21
        0,
        // State 22
        -103,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            11 => 5,
            13 => 6,
            14 => match state {
                2 => 17,
                4 => 21,
                _ => 7,
            },
            15 => 8,
            36 => 9,
            37 => match state {
                1 => 15,
                3 => 18,
                _ => 10,
            },
            39 => 3,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = SigSpec;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct SigSpecParser {
        _priv: (),
    }

    impl SigSpecParser {
        pub fn new() -> SigSpecParser {
            SigSpecParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<SigSpec, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<SigSpec,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                // __SigSpec = SigSpec => ActionFn(5);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action5::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            141 => {
                __reduce141(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce141<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __WireOption = WireOption => ActionFn(8);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action8::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 63)
    }
}
pub use self::__parse__SigSpec::SigSpecParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__WireOption {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use super::super::lexer::*;
    use super::super::parser::*;
    use super::super::syntax::*;
    use anyhow::anyhow;
    use lalrpop_util::ParseError;
    use std::collections::HashMap;
    use std::iter::FromIterator;
    use std::sync::atomic::Ordering;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub enum __Symbol<>
     {
        Variant0(Token),
        Variant1(SigSpec),
        Variant2(::std::vec::Vec<SigSpec>),
        Variant3(HashMap<String, Const>),
        Variant4(()),
        Variant5(::std::vec::Vec<()>),
        Variant6(CellFlag),
        Variant7(CellOption),
        Variant8(::std::vec::Vec<CellOption>),
        Variant9(Const),
        Variant10(Design),
        Variant11(String),
        Variant12(i64),
        Variant13(MemoryOption),
        Variant14(::std::vec::Vec<MemoryOption>),
        Variant15(ModuleStmt),
        Variant16(::std::vec::Vec<ModuleStmt>),
        Variant17(ProcessStmt),
        Variant18(::std::vec::Vec<ProcessStmt>),
        Variant19(ProcessSwitchCase),
        Variant20(::std::vec::Vec<ProcessSwitchCase>),
        Variant21(Vec<SigSpec>),
        Variant22(ProcessSync),
        Variant23(::std::vec::Vec<ProcessSync>),
        Variant24(ProcessSyncType),
        Variant25((SigSpec, SigSpec)),
        Variant26(::std::vec::Vec<(SigSpec, SigSpec)>),
        Variant27(Signal),
        Variant28(::std::option::Option<SigSpec>),
        Variant29(WireOption),
        Variant30(::std::vec::Vec<WireOption>),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 9, 6, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 42 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        0,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        -142,
        // State 7
        -114,
        // State 8
        -113,
        // State 9
        -118,
        // State 10
        -30,
        // State 11
        -116,
        // State 12
        -115,
        // State 13
        -117,
        // State 14
        -112,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            14 => match state {
                2 => 11,
                3 => 12,
                4 => 13,
                5 => 14,
                _ => 9,
            },
            41 => 6,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> Vec<::std::string::String> {
        const __TERMINAL: &[&str] = &[
            r###"",""###,
            r###"":""###,
            r###""[""###,
            r###""]""###,
            r###""always""###,
            r###""assign""###,
            r###""attribute""###,
            r###""autoidx""###,
            r###""case""###,
            r###""cell""###,
            r###""connect""###,
            r###""edge""###,
            r###""end""###,
            r###""global""###,
            r###""high""###,
            r###""ident""###,
            r###""init""###,
            r###""inout""###,
            r###""input""###,
            r###""int""###,
            r###""lit""###,
            r###""low""###,
            r###""memory""###,
            r###""module""###,
            r###""negedge""###,
            r###""offset""###,
            r###""output""###,
            r###""parameter""###,
            r###""posedge""###,
            r###""process""###,
            r###""real""###,
            r###""sig""###,
            r###""signed""###,
            r###""size""###,
            r###""switch""###,
            r###""sync""###,
            r###""update""###,
            r###""upto""###,
            r###""width""###,
            r###""wire""###,
            r###""{""###,
            r###""}""###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'__0>
    where 
    {
        parser: &'__0 mut Parser,
        __phantom: ::std::marker::PhantomData<()>,
    }
    impl<'__0> __state_machine::ParserDefinition for __StateMachine<'__0>
    where 
    {
        type Location = Location;
        type Error = Error;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = WireOption;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 42 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.parser,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::Comma if true => Some(0),
            Token::Colon if true => Some(1),
            Token::LBracket if true => Some(2),
            Token::RBracket if true => Some(3),
            Token::Always if true => Some(4),
            Token::Assign if true => Some(5),
            Token::Attribute if true => Some(6),
            Token::Autoidx if true => Some(7),
            Token::Case if true => Some(8),
            Token::Cell if true => Some(9),
            Token::Connect if true => Some(10),
            Token::Edge if true => Some(11),
            Token::End if true => Some(12),
            Token::Global if true => Some(13),
            Token::High if true => Some(14),
            Token::Ident(_) if true => Some(15),
            Token::Init if true => Some(16),
            Token::Inout if true => Some(17),
            Token::Input if true => Some(18),
            Token::Int(_) if true => Some(19),
            Token::Literal(_) if true => Some(20),
            Token::Low if true => Some(21),
            Token::Memory if true => Some(22),
            Token::Module if true => Some(23),
            Token::Negedge if true => Some(24),
            Token::Offset if true => Some(25),
            Token::Output if true => Some(26),
            Token::Parameter if true => Some(27),
            Token::Posedge if true => Some(28),
            Token::Process if true => Some(29),
            Token::Real if true => Some(30),
            Token::Signal(_) if true => Some(31),
            Token::Signed if true => Some(32),
            Token::Size if true => Some(33),
            Token::Switch if true => Some(34),
            Token::Sync if true => Some(35),
            Token::Update if true => Some(36),
            Token::Upto if true => Some(37),
            Token::Width if true => Some(38),
            Token::Wire if true => Some(39),
            Token::LBrace if true => Some(40),
            Token::RBrace if true => Some(41),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: ::std::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 => __Symbol::Variant0(__token),
            _ => unreachable!(),
        }
    }
    pub struct WireOptionParser {
        _priv: (),
    }

    impl WireOptionParser {
        pub fn new() -> WireOptionParser {
            WireOptionParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            parser: &mut Parser,
            __tokens0: __TOKENS,
        ) -> Result<WireOption, __lalrpop_util::ParseError<Location, Token, Error>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    parser,
                    __phantom: ::std::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        parser: &mut Parser,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> Option<Result<WireOption,__lalrpop_util::ParseError<Location, Token, Error>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            28 => {
                // Ident = "ident" => ActionFn(20);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action20::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 13)
            }
            29 => {
                // Int = "int" => ActionFn(22);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action22::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 14)
            }
            30 => {
                // Lit = "lit" => ActionFn(21);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action21::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (1, 15)
            }
            31 => {
                __reduce31(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            98 => {
                // Sig = "sig" => ActionFn(23);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = match super::__action23::<>(parser, __sym0) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 36)
            }
            99 => {
                __reduce99(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            100 => {
                __reduce100(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            101 => {
                // SigSpec = SigSpec, "[", Int, "]" => ActionFn(29);
                assert!(__symbols.len() >= 4);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym3.2.clone();
                let __nt = match super::__action29::<>(parser, __sym0, __sym1, __sym2, __sym3) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (4, 37)
            }
            102 => {
                // SigSpec = SigSpec, "[", Int, ":", Int, "]" => ActionFn(30);
                assert!(__symbols.len() >= 6);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym5.2.clone();
                let __nt = match super::__action30::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5) {
                    Ok(v) => v,
                    Err(e) => return Some(Err(e)),
                };
                __symbols.push((__start, __Symbol::Variant1(__nt), __end));
                (6, 37)
            }
            103 => {
                __reduce103(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            104 => {
                __reduce104(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            105 => {
                __reduce105(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            106 => {
                __reduce106(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            107 => {
                __reduce107(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            108 => {
                __reduce108(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            109 => {
                __reduce109(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            110 => {
                __reduce110(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            111 => {
                __reduce111(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            112 => {
                __reduce112(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            113 => {
                __reduce113(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            114 => {
                __reduce114(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            115 => {
                __reduce115(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            116 => {
                __reduce116(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            117 => {
                __reduce117(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            118 => {
                __reduce118(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            119 => {
                __reduce119(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            120 => {
                __reduce120(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            121 => {
                __reduce121(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            122 => {
                __reduce122(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            123 => {
                __reduce123(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            124 => {
                __reduce124(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            125 => {
                __reduce125(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            126 => {
                __reduce126(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            127 => {
                __reduce127(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            128 => {
                __reduce128(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            129 => {
                __reduce129(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            130 => {
                __reduce130(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            131 => {
                __reduce131(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            132 => {
                __reduce132(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            133 => {
                __reduce133(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            134 => {
                __reduce134(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            135 => {
                __reduce135(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            136 => {
                __reduce136(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            137 => {
                __reduce137(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            138 => {
                __reduce138(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            139 => {
                __reduce139(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            140 => {
                __reduce140(parser, __lookahead_start, __symbols, ::std::marker::PhantomData::<()>)
            }
            141 => {
                // __WireOption = WireOption => ActionFn(8);
                let __sym0 = __pop_Variant29(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action8::<>(parser, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, (SigSpec, SigSpec), Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant25(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellFlag, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, CellOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Const, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Design, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, HashMap<String, Const>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, MemoryOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ModuleStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessStmt, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSwitchCase, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSync, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ProcessSyncType, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant24(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, SigSpec, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Signal, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant27(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, String, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Token, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, WireOption, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant29(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::option::Option<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant28(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<()>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant26(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<CellOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<MemoryOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ModuleStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessStmt>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSwitchCase>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<ProcessSync>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<SigSpec>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
    >(
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>
    ) -> (Location, ::std::vec::Vec<WireOption>, Location)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant30(__v), __r) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",") = SigSpec, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action96::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce2<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")* = (<SigSpec> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 1)
    }
    pub(crate) fn __reduce3<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = SigSpec, "," => ActionFn(123);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action123::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<SigSpec> ",")+ = (<SigSpec> ",")+, SigSpec, "," => ActionFn(124);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action124::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // AttrCopy =  => ActionFn(33);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action33::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce6<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute = "attribute", Ident, Const => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action32::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce7<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action90::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 5)
    }
    pub(crate) fn __reduce8<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute* = Attribute+ => ActionFn(91);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action91::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 5)
    }
    pub(crate) fn __reduce9<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute => ActionFn(107);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce10<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Attribute+ = Attribute+, Attribute => ActionFn(108);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action108::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag =  => ActionFn(44);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action44::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "signed" => ActionFn(45);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action45::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce13<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellFlag = CellFlag, "real" => ActionFn(46);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action46::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce14<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "parameter", CellFlag, Ident, Const => ActionFn(47);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant9(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (4, 8)
    }
    pub(crate) fn __reduce15<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption = "connect", Ident, SigSpec => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce16<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce17<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption* = CellOption+ => ActionFn(81);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action81::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce18<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption => ActionFn(117);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce19<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // CellOption+ = CellOption+, CellOption => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant7(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action118::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce20<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Sig => ActionFn(24);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce21<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Lit => ActionFn(25);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce22<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Const = Int => ActionFn(26);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce23<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action72::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce24<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, Attribute => ActionFn(73);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action73::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce25<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, "autoidx", Int => ActionFn(74);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action74::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 12)
    }
    pub(crate) fn __reduce26<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, "end" => ActionFn(133);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action133::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (5, 12)
    }
    pub(crate) fn __reduce27<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Design = Design, AttrCopy, "module", Ident, ModuleStmt+, "end" => ActionFn(134);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant16(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant3(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action134::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (6, 12)
    }
    pub(crate) fn __reduce31<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "width", Int => ActionFn(41);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce32<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "offset", Int => ActionFn(42);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce33<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption = "size", Int => ActionFn(43);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action43::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce34<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 17)
    }
    pub(crate) fn __reduce35<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption* = MemoryOption+ => ActionFn(83);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce36<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption => ActionFn(115);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action115::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce37<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MemoryOption+ = MemoryOption+, MemoryOption => ActionFn(116);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action116::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce38<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = Attribute => ActionFn(64);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce39<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident => ActionFn(65);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action65::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce40<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "parameter", Ident, Const => ActionFn(66);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant9(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action66::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce41<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", Ident => ActionFn(161);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action161::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce42<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "wire", WireOption+, Ident => ActionFn(162);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant30(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action162::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce43<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", Ident => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce44<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "memory", MemoryOption+, Ident => ActionFn(132);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action132::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce45<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, "end" => ActionFn(129);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action129::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce46<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "cell", Ident, Ident, CellOption+, "end" => ActionFn(130);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant8(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action130::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce47<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, "end" => ActionFn(143);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action143::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (4, 19)
    }
    pub(crate) fn __reduce48<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessSync+, "end" => ActionFn(144);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action144::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce49<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, "end" => ActionFn(145);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action145::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (5, 19)
    }
    pub(crate) fn __reduce50<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = AttrCopy, "process", Ident, ProcessStmt+, ProcessSync+, "end" => ActionFn(146);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action146::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (6, 19)
    }
    pub(crate) fn __reduce51<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt = "connect", SigSpec, SigSpec => ActionFn(71);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action71::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce52<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action76::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 20)
    }
    pub(crate) fn __reduce53<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt* = ModuleStmt+ => ActionFn(77);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce54<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt => ActionFn(121);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce55<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ModuleStmt+ = ModuleStmt+, ModuleStmt => ActionFn(122);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action122::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 21)
    }
    pub(crate) fn __reduce56<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = Attribute => ActionFn(51);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action51::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 22)
    }
    pub(crate) fn __reduce57<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, "end" => ActionFn(139);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action139::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 22)
    }
    pub(crate) fn __reduce58<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, ProcessSwitchCase+, "end" => ActionFn(140);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action140::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce59<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, "end" => ActionFn(141);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action141::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (5, 22)
    }
    pub(crate) fn __reduce60<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = AttrCopy, "switch", SigSpec, Attribute+, ProcessSwitchCase+, "end" => ActionFn(142);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant5(__symbols);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action142::<>(parser, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (6, 22)
    }
    pub(crate) fn __reduce61<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt = "assign", SigSpec, SigSpec => ActionFn(53);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action53::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce62<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* =  => ActionFn(92);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action92::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 23)
    }
    pub(crate) fn __reduce63<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt* = ProcessStmt+ => ActionFn(93);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action93::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce64<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt => ActionFn(105);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action105::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce65<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessStmt+ = ProcessStmt+, ProcessStmt => ActionFn(106);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce66<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList => ActionFn(137);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action137::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 25)
    }
    pub(crate) fn __reduce67<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase = AttrCopy, "case", ProcessSwitchCaseSigList, ProcessStmt+ => ActionFn(138);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action138::<>(parser, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (4, 25)
    }
    pub(crate) fn __reduce68<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action88::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce69<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase* = ProcessSwitchCase+ => ActionFn(89);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce70<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase => ActionFn(109);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action109::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce71<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCase+ = ProcessSwitchCase+, ProcessSwitchCase => ActionFn(110);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action110::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce72<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = SigSpec => ActionFn(157);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action157::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce73<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList =  => ActionFn(158);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action158::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce74<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+, SigSpec => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action159::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce75<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSwitchCaseSigList = (<SigSpec> ",")+ => ActionFn(160);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce76<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always" => ActionFn(147);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action147::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce77<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "always", ProcessSyncUpdate+ => ActionFn(148);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action148::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce78<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global" => ActionFn(149);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action149::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce79<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "global", ProcessSyncUpdate+ => ActionFn(150);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action150::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce80<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init" => ActionFn(151);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action151::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce81<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", "init", ProcessSyncUpdate+ => ActionFn(152);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action152::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce82<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType => ActionFn(153);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action153::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 29)
    }
    pub(crate) fn __reduce83<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync = "sync", ProcessSyncType, ProcessSyncUpdate+ => ActionFn(154);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant26(__symbols);
        let __sym1 = __pop_Variant24(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action154::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (3, 29)
    }
    pub(crate) fn __reduce84<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (0, 30)
    }
    pub(crate) fn __reduce85<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync* = ProcessSync+ => ActionFn(79);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce86<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync => ActionFn(119);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce87<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSync+ = ProcessSync+, ProcessSync => ActionFn(120);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant22(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action120::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (2, 31)
    }
    pub(crate) fn __reduce88<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "low", SigSpec => ActionFn(54);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action54::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce89<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "high", SigSpec => ActionFn(55);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action55::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce90<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "posedge", SigSpec => ActionFn(56);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action56::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce91<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "negedge", SigSpec => ActionFn(57);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action57::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce92<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncType = "edge", SigSpec => ActionFn(58);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action58::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 32)
    }
    pub(crate) fn __reduce93<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate = "update", SigSpec, SigSpec => ActionFn(59);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant1(__symbols);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action59::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 33)
    }
    pub(crate) fn __reduce94<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* =  => ActionFn(86);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action86::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (0, 34)
    }
    pub(crate) fn __reduce95<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate* = ProcessSyncUpdate+ => ActionFn(87);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce96<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate => ActionFn(111);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action111::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce97<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ProcessSyncUpdate+ = ProcessSyncUpdate+, ProcessSyncUpdate => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant25(__symbols);
        let __sym0 = __pop_Variant26(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action112::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 35)
    }
    pub(crate) fn __reduce99<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Const => ActionFn(27);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce100<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = Ident => ActionFn(28);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce103<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", "}" => ActionFn(155);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action155::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (2, 37)
    }
    pub(crate) fn __reduce104<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec = "{", SigSpec+, "}" => ActionFn(156);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action156::<>(parser, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (3, 37)
    }
    pub(crate) fn __reduce105<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action99::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (0, 38)
    }
    pub(crate) fn __reduce106<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec* = SigSpec+ => ActionFn(100);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce107<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec => ActionFn(101);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action101::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce108<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec+ = SigSpec+, SigSpec => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant1(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 39)
    }
    pub(crate) fn __reduce109<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? = SigSpec => ActionFn(94);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action94::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce110<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // SigSpec? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action95::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 40)
    }
    pub(crate) fn __reduce111<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "width", Int => ActionFn(34);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action34::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce112<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "upto" => ActionFn(35);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action35::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce113<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "signed" => ActionFn(36);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action36::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce114<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "offset", Int => ActionFn(37);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce115<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "input", Int => ActionFn(38);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce116<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "output", Int => ActionFn(39);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce117<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption = "inout", Int => ActionFn(40);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 41)
    }
    pub(crate) fn __reduce118<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* =  => ActionFn(84);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action84::<>(parser, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 42)
    }
    pub(crate) fn __reduce119<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption* = WireOption+ => ActionFn(85);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action85::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce120<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption => ActionFn(113);
        let __sym0 = __pop_Variant29(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action113::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce121<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // WireOption+ = WireOption+, WireOption => ActionFn(114);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action114::<>(parser, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (2, 43)
    }
    pub(crate) fn __reduce122<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __AttrCopy = AttrCopy => ActionFn(7);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action7::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 44)
    }
    pub(crate) fn __reduce123<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Attribute = Attribute => ActionFn(6);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action6::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce124<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellFlag = CellFlag => ActionFn(10);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce125<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __CellOption = CellOption => ActionFn(11);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce126<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Const = Const => ActionFn(4);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action4::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce127<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Design = Design => ActionFn(19);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Ident = Ident => ActionFn(0);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    pub(crate) fn __reduce129<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Int = Int => ActionFn(2);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action2::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Lit = Lit => ActionFn(1);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce131<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __MemoryOption = MemoryOption => ActionFn(9);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce132<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ModuleStmt = ModuleStmt => ActionFn(18);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce133<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessStmt = ProcessStmt => ActionFn(14);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action14::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 55)
    }
    pub(crate) fn __reduce134<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCase = ProcessSwitchCase => ActionFn(13);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action13::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce135<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSwitchCaseSigList = ProcessSwitchCaseSigList => ActionFn(12);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action12::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 57)
    }
    pub(crate) fn __reduce136<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSync = ProcessSync => ActionFn(17);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 58)
    }
    pub(crate) fn __reduce137<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncType = ProcessSyncType => ActionFn(15);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action15::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 59)
    }
    pub(crate) fn __reduce138<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __ProcessSyncUpdate = ProcessSyncUpdate => ActionFn(16);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action16::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (1, 60)
    }
    pub(crate) fn __reduce139<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Sig = Sig => ActionFn(3);
        let __sym0 = __pop_Variant27(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 61)
    }
    pub(crate) fn __reduce140<
    >(
        parser: &mut Parser,
        __lookahead_start: Option<&Location>,
        __symbols: &mut ::std::vec::Vec<(Location,__Symbol<>,Location)>,
        _: ::std::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __SigSpec = SigSpec => ActionFn(5);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action5::<>(parser, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 62)
    }
}
pub use self::__parse__WireOption::WireOptionParser;

#[allow(unused_variables)]
fn __action0<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, String, Location),
) -> String
{
    __0
}

#[allow(unused_variables)]
fn __action1<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, String, Location),
) -> String
{
    __0
}

#[allow(unused_variables)]
fn __action2<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, i64, Location),
) -> i64
{
    __0
}

#[allow(unused_variables)]
fn __action3<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Signal, Location),
) -> Signal
{
    __0
}

#[allow(unused_variables)]
fn __action4<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Const, Location),
) -> Const
{
    __0
}

#[allow(unused_variables)]
fn __action5<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, SigSpec, Location),
) -> SigSpec
{
    __0
}

#[allow(unused_variables)]
fn __action6<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, (), Location),
) -> ()
{
    ()
}

#[allow(unused_variables)]
fn __action7<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, HashMap<String, Const>, Location),
) -> HashMap<String, Const>
{
    __0
}

#[allow(unused_variables)]
fn __action8<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, WireOption, Location),
) -> WireOption
{
    __0
}

#[allow(unused_variables)]
fn __action9<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, MemoryOption, Location),
) -> MemoryOption
{
    __0
}

#[allow(unused_variables)]
fn __action10<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, CellFlag, Location),
) -> CellFlag
{
    __0
}

#[allow(unused_variables)]
fn __action11<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, CellOption, Location),
) -> CellOption
{
    __0
}

#[allow(unused_variables)]
fn __action12<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Vec<SigSpec>, Location),
) -> Vec<SigSpec>
{
    __0
}

#[allow(unused_variables)]
fn __action13<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, ProcessSwitchCase, Location),
) -> ProcessSwitchCase
{
    __0
}

#[allow(unused_variables)]
fn __action14<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, ProcessStmt, Location),
) -> ProcessStmt
{
    __0
}

#[allow(unused_variables)]
fn __action15<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, ProcessSyncType, Location),
) -> ProcessSyncType
{
    __0
}

#[allow(unused_variables)]
fn __action16<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, (SigSpec, SigSpec), Location),
) -> (SigSpec, SigSpec)
{
    __0
}

#[allow(unused_variables)]
fn __action17<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, ProcessSync, Location),
) -> ProcessSync
{
    __0
}

#[allow(unused_variables)]
fn __action18<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, ModuleStmt, Location),
) -> ModuleStmt
{
    __0
}

#[allow(unused_variables)]
fn __action19<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Design, Location),
) -> Design
{
    __0
}

#[allow(unused_variables)]
fn __action20<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Token, Location),
) -> Result<String,__lalrpop_util::ParseError<Location,Token,Error>>
{
    match __0 {
		Token::Ident(d) => Ok(d),
		_ => Err(ParseError::User{ error:anyhow!("internal") }),
	}
}

#[allow(unused_variables)]
fn __action21<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Token, Location),
) -> Result<String,__lalrpop_util::ParseError<Location,Token,Error>>
{
    match __0 {
		Token::Literal(d) => Ok(d),
		_ => Err(ParseError::User{ error:anyhow!("internal") }),
	}
}

#[allow(unused_variables)]
fn __action22<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Token, Location),
) -> Result<i64,__lalrpop_util::ParseError<Location,Token,Error>>
{
    match __0 {
		Token::Int(d) => Ok(d),
		_ => Err(ParseError::User{ error:anyhow!("internal") }),
	}
}

#[allow(unused_variables)]
fn __action23<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Token, Location),
) -> Result<Signal,__lalrpop_util::ParseError<Location,Token,Error>>
{
    match __0 {
		Token::Signal(d) => Ok(d),
		_ => Err(ParseError::User{ error:anyhow!("internal") }),
	}
}

#[allow(unused_variables)]
fn __action24<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Signal, Location),
) -> Const
{
    Const::Sig(__0)
}

#[allow(unused_variables)]
fn __action25<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, String, Location),
) -> Const
{
    Const::Str(__0)
}

#[allow(unused_variables)]
fn __action26<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, i64, Location),
) -> Const
{
    Const::Int(__0)
}

#[allow(unused_variables)]
fn __action27<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Const, Location),
) -> SigSpec
{
    SigSpec::Const((__0, None))
}

#[allow(unused_variables)]
fn __action28<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, String, Location),
) -> SigSpec
{
    SigSpec::Refer((__0, None))
}

#[allow(unused_variables)]
fn __action29<
>(
    parser: &mut Parser,
    (_, i, _): (Location, SigSpec, Location),
    (_, _, _): (Location, Token, Location),
    (_, l, _): (Location, i64, Location),
    (_, _, _): (Location, Token, Location),
) -> Result<SigSpec,__lalrpop_util::ParseError<Location,Token,Error>>
{
    match i {
		SigSpec::Const((c, _)) => Ok(SigSpec::Const((c, Some(Index::Offset(l))))),
		SigSpec::Refer((c, _)) => Ok(SigSpec::Refer((c, Some(Index::Offset(l))))),
		_ => Err(ParseError::User{ error:anyhow!("except a sigspec") }),
	}
}

#[allow(unused_variables)]
fn __action30<
>(
    parser: &mut Parser,
    (_, i, _): (Location, SigSpec, Location),
    (_, _, _): (Location, Token, Location),
    (_, l, _): (Location, i64, Location),
    (_, _, _): (Location, Token, Location),
    (_, r, _): (Location, i64, Location),
    (_, _, _): (Location, Token, Location),
) -> Result<SigSpec,__lalrpop_util::ParseError<Location,Token,Error>>
{
    match i {
		SigSpec::Const((c, _)) => Ok(SigSpec::Const((c, Some(Index::Range((l, r)))))),
		SigSpec::Refer((c, _)) => Ok(SigSpec::Refer((c, Some(Index::Range((l, r)))))),
		_ => Err(ParseError::User{ error:anyhow!("except a sigspec") }),
	}
}

#[allow(unused_variables)]
fn __action31<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, ::std::vec::Vec<SigSpec>, Location),
    (_, _, _): (Location, Token, Location),
) -> SigSpec
{
    SigSpec::List(__0)
}

#[allow(unused_variables)]
fn __action32<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, String, Location),
    (_, __1, _): (Location, Const, Location),
) -> ()
{
    {
		parser.attrs_mut().insert(__0, __1);
	}
}

#[allow(unused_variables)]
fn __action33<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> HashMap<String, Const>
{
    HashMap::from_iter(parser.attrs_mut().drain())
}

#[allow(unused_variables)]
fn __action34<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, i64, Location),
) -> WireOption
{
    WireOption::Width(__0)
}

#[allow(unused_variables)]
fn __action35<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Token, Location),
) -> WireOption
{
    WireOption::Upto
}

#[allow(unused_variables)]
fn __action36<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Token, Location),
) -> WireOption
{
    WireOption::Signed
}

#[allow(unused_variables)]
fn __action37<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, i64, Location),
) -> WireOption
{
    WireOption::Offset(__0)
}

#[allow(unused_variables)]
fn __action38<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, i64, Location),
) -> WireOption
{
    WireOption::Input(__0)
}

#[allow(unused_variables)]
fn __action39<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, i64, Location),
) -> WireOption
{
    WireOption::Output(__0)
}

#[allow(unused_variables)]
fn __action40<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, i64, Location),
) -> WireOption
{
    WireOption::Inout(__0)
}

#[allow(unused_variables)]
fn __action41<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, i, _): (Location, i64, Location),
) -> MemoryOption
{
    MemoryOption::Width(i)
}

#[allow(unused_variables)]
fn __action42<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, i, _): (Location, i64, Location),
) -> MemoryOption
{
    MemoryOption::Offset(i)
}

#[allow(unused_variables)]
fn __action43<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, i, _): (Location, i64, Location),
) -> MemoryOption
{
    MemoryOption::Size(i)
}

#[allow(unused_variables)]
fn __action44<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> CellFlag
{
    CellFlag::empty()
}

#[allow(unused_variables)]
fn __action45<
>(
    parser: &mut Parser,
    (_, mut s, _): (Location, CellFlag, Location),
    (_, _, _): (Location, Token, Location),
) -> CellFlag
{
    {
		s.insert(CellFlag::SIGNED);
		s
	}
}

#[allow(unused_variables)]
fn __action46<
>(
    parser: &mut Parser,
    (_, mut s, _): (Location, CellFlag, Location),
    (_, _, _): (Location, Token, Location),
) -> CellFlag
{
    {
		s.insert(CellFlag::REAL);
		s
	}
}

#[allow(unused_variables)]
fn __action47<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, CellFlag, Location),
    (_, __1, _): (Location, String, Location),
    (_, __2, _): (Location, Const, Location),
) -> CellOption
{
    CellOption::Param((__0, __1, __2))
}

#[allow(unused_variables)]
fn __action48<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, String, Location),
    (_, __1, _): (Location, SigSpec, Location),
) -> CellOption
{
    CellOption::Connect((__0, __1))
}

#[allow(unused_variables)]
fn __action49<
>(
    parser: &mut Parser,
    (_, mut m, _): (Location, ::std::vec::Vec<SigSpec>, Location),
    (_, n, _): (Location, ::std::option::Option<SigSpec>, Location),
) -> Vec<SigSpec>
{
    match n {
		None => m,
		Some(e) => {
			m.push(e);
			m
		},
	}
}

#[allow(unused_variables)]
fn __action50<
>(
    parser: &mut Parser,
    (_, mut a, _): (Location, HashMap<String, Const>, Location),
    (_, _, _): (Location, Token, Location),
    (_, s, _): (Location, Vec<SigSpec>, Location),
    (_, b, _): (Location, ::std::vec::Vec<ProcessStmt>, Location),
) -> ProcessSwitchCase
{
    {
		let mut m = ProcessSwitchCase::new(s, b);
		for (k, v) in a.drain() {
			m.attrs_mut().insert(k, v);
		}
		m
	}
}

#[allow(unused_variables)]
fn __action51<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, (), Location),
) -> ProcessStmt
{
    ProcessStmt::Empty
}

#[allow(unused_variables)]
fn __action52<
>(
    parser: &mut Parser,
    (_, mut a, _): (Location, HashMap<String, Const>, Location),
    (_, _, _): (Location, Token, Location),
    (_, s, _): (Location, SigSpec, Location),
    (_, _, _): (Location, ::std::vec::Vec<()>, Location),
    (_, c, _): (Location, ::std::vec::Vec<ProcessSwitchCase>, Location),
    (_, _, _): (Location, Token, Location),
) -> ProcessStmt
{
    {
		let mut s = ProcessSwitch::new(s, c);
		for (k, v) in a.drain() {
			s.attrs_mut().insert(k, v);
		}
		ProcessStmt::Switch(s)
	}
}

#[allow(unused_variables)]
fn __action53<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, SigSpec, Location),
    (_, __1, _): (Location, SigSpec, Location),
) -> ProcessStmt
{
    ProcessStmt::Assign((__0, __1))
}

#[allow(unused_variables)]
fn __action54<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, SigSpec, Location),
) -> ProcessSyncType
{
    ProcessSyncType::Low(__0)
}

#[allow(unused_variables)]
fn __action55<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, SigSpec, Location),
) -> ProcessSyncType
{
    ProcessSyncType::High(__0)
}

#[allow(unused_variables)]
fn __action56<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, SigSpec, Location),
) -> ProcessSyncType
{
    ProcessSyncType::Posedge(__0)
}

#[allow(unused_variables)]
fn __action57<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, SigSpec, Location),
) -> ProcessSyncType
{
    ProcessSyncType::Negedge(__0)
}

#[allow(unused_variables)]
fn __action58<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, SigSpec, Location),
) -> ProcessSyncType
{
    ProcessSyncType::Edge(__0)
}

#[allow(unused_variables)]
fn __action59<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, SigSpec, Location),
    (_, __1, _): (Location, SigSpec, Location),
) -> (SigSpec, SigSpec)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action60<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location),
) -> ProcessSync
{
    ProcessSync::new(ProcessSyncType::Always, __0)
}

#[allow(unused_variables)]
fn __action61<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location),
) -> ProcessSync
{
    ProcessSync::new(ProcessSyncType::Global, __0)
}

#[allow(unused_variables)]
fn __action62<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location),
) -> ProcessSync
{
    ProcessSync::new(ProcessSyncType::Init, __0)
}

#[allow(unused_variables)]
fn __action63<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, ProcessSyncType, Location),
    (_, __1, _): (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location),
) -> ProcessSync
{
    ProcessSync::new(__0, __1)
}

#[allow(unused_variables)]
fn __action64<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, (), Location),
) -> ModuleStmt
{
    ModuleStmt::Empty
}

#[allow(unused_variables)]
fn __action65<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, String, Location),
) -> ModuleStmt
{
    ModuleStmt::Param(__0)
}

#[allow(unused_variables)]
fn __action66<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, String, Location),
    (_, __1, _): (Location, Const, Location),
) -> ModuleStmt
{
    ModuleStmt::ParamVal((__0, __1))
}

#[allow(unused_variables)]
fn __action67<
>(
    parser: &mut Parser,
    (_, mut a, _): (Location, HashMap<String, Const>, Location),
    (_, _, _): (Location, Token, Location),
    (_, o, _): (Location, ::std::vec::Vec<WireOption>, Location),
    (_, i, _): (Location, String, Location),
) -> ModuleStmt
{
    {
		let mut m = Wire::new(i, o);
		for (k, v) in a.drain() {
			m.attrs_mut().insert(k, v);
		}
		ModuleStmt::Wire(m)
	}
}

#[allow(unused_variables)]
fn __action68<
>(
    parser: &mut Parser,
    (_, mut a, _): (Location, HashMap<String, Const>, Location),
    (_, _, _): (Location, Token, Location),
    (_, o, _): (Location, ::std::vec::Vec<MemoryOption>, Location),
    (_, i, _): (Location, String, Location),
) -> ModuleStmt
{
    {
		let mut m = Memory::new(i, o);
		for (k, v) in a.drain() {
			m.attrs_mut().insert(k, v);
		}
		ModuleStmt::Memory(m)
	}
}

#[allow(unused_variables)]
fn __action69<
>(
    parser: &mut Parser,
    (_, mut a, _): (Location, HashMap<String, Const>, Location),
    (_, _, _): (Location, Token, Location),
    (_, i1, _): (Location, String, Location),
    (_, i2, _): (Location, String, Location),
    (_, o, _): (Location, ::std::vec::Vec<CellOption>, Location),
    (_, _, _): (Location, Token, Location),
) -> ModuleStmt
{
    {
		let mut m = Cell::new(i1, i2, o);
		for (k, v) in a.drain() {
			m.attrs_mut().insert(k, v);
		}
		ModuleStmt::Cell(m)
	}
}

#[allow(unused_variables)]
fn __action70<
>(
    parser: &mut Parser,
    (_, mut a, _): (Location, HashMap<String, Const>, Location),
    (_, _, _): (Location, Token, Location),
    (_, i, _): (Location, String, Location),
    (_, b, _): (Location, ::std::vec::Vec<ProcessStmt>, Location),
    (_, s, _): (Location, ::std::vec::Vec<ProcessSync>, Location),
    (_, _, _): (Location, Token, Location),
) -> ModuleStmt
{
    {
		let mut p = Process::new(i, b, s);
		for (k, v) in a.drain() {
			p.attrs_mut().insert(k, v);
		}
		ModuleStmt::Process(p)
	}
}

#[allow(unused_variables)]
fn __action71<
>(
    parser: &mut Parser,
    (_, _, _): (Location, Token, Location),
    (_, __0, _): (Location, SigSpec, Location),
    (_, __1, _): (Location, SigSpec, Location),
) -> ModuleStmt
{
    ModuleStmt::Connect(Connect::new(__0, __1))
}

#[allow(unused_variables)]
fn __action72<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Design
{
    Design::new()
}

#[allow(unused_variables)]
fn __action73<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, Design, Location),
    (_, _, _): (Location, (), Location),
) -> Design
{
    __0
}

#[allow(unused_variables)]
fn __action74<
>(
    parser: &mut Parser,
    (_, mut d, _): (Location, Design, Location),
    (_, _, _): (Location, Token, Location),
    (_, i, _): (Location, i64, Location),
) -> Design
{
    {
		AUTOIDX.fetch_max(i as usize, Ordering::SeqCst);
		*d.autoidx_mut() = i as usize;
		d
	}
}

#[allow(unused_variables)]
fn __action75<
>(
    parser: &mut Parser,
    (_, mut d, _): (Location, Design, Location),
    (_, mut a, _): (Location, HashMap<String, Const>, Location),
    (_, _, _): (Location, Token, Location),
    (_, id, _): (Location, String, Location),
    (_, stmts, _): (Location, ::std::vec::Vec<ModuleStmt>, Location),
    (_, _, _): (Location, Token, Location),
) -> Design
{
    {
		let mut m = Module::new(id, stmts);
		for (k, v) in a.drain() {
			m.attrs_mut().insert(k, v);
		}
		d.modules_mut().push(m);
		d
	}
}

#[allow(unused_variables)]
fn __action76<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<ModuleStmt>
{
    vec![]
}

#[allow(unused_variables)]
fn __action77<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<ModuleStmt>, Location),
) -> ::std::vec::Vec<ModuleStmt>
{
    v
}

#[allow(unused_variables)]
fn __action78<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<ProcessSync>
{
    vec![]
}

#[allow(unused_variables)]
fn __action79<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<ProcessSync>, Location),
) -> ::std::vec::Vec<ProcessSync>
{
    v
}

#[allow(unused_variables)]
fn __action80<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<CellOption>
{
    vec![]
}

#[allow(unused_variables)]
fn __action81<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<CellOption>, Location),
) -> ::std::vec::Vec<CellOption>
{
    v
}

#[allow(unused_variables)]
fn __action82<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<MemoryOption>
{
    vec![]
}

#[allow(unused_variables)]
fn __action83<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<MemoryOption>, Location),
) -> ::std::vec::Vec<MemoryOption>
{
    v
}

#[allow(unused_variables)]
fn __action84<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<WireOption>
{
    vec![]
}

#[allow(unused_variables)]
fn __action85<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<WireOption>, Location),
) -> ::std::vec::Vec<WireOption>
{
    v
}

#[allow(unused_variables)]
fn __action86<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<(SigSpec, SigSpec)>
{
    vec![]
}

#[allow(unused_variables)]
fn __action87<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location),
) -> ::std::vec::Vec<(SigSpec, SigSpec)>
{
    v
}

#[allow(unused_variables)]
fn __action88<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<ProcessSwitchCase>
{
    vec![]
}

#[allow(unused_variables)]
fn __action89<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<ProcessSwitchCase>, Location),
) -> ::std::vec::Vec<ProcessSwitchCase>
{
    v
}

#[allow(unused_variables)]
fn __action90<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<()>
{
    vec![]
}

#[allow(unused_variables)]
fn __action91<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<()>, Location),
) -> ::std::vec::Vec<()>
{
    v
}

#[allow(unused_variables)]
fn __action92<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<ProcessStmt>
{
    vec![]
}

#[allow(unused_variables)]
fn __action93<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<ProcessStmt>, Location),
) -> ::std::vec::Vec<ProcessStmt>
{
    v
}

#[allow(unused_variables)]
fn __action94<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, SigSpec, Location),
) -> ::std::option::Option<SigSpec>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action95<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::option::Option<SigSpec>
{
    None
}

#[allow(unused_variables)]
fn __action96<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<SigSpec>
{
    vec![]
}

#[allow(unused_variables)]
fn __action97<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<SigSpec>, Location),
) -> ::std::vec::Vec<SigSpec>
{
    v
}

#[allow(unused_variables)]
fn __action98<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, SigSpec, Location),
    (_, _, _): (Location, Token, Location),
) -> SigSpec
{
    __0
}

#[allow(unused_variables)]
fn __action99<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> ::std::vec::Vec<SigSpec>
{
    vec![]
}

#[allow(unused_variables)]
fn __action100<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<SigSpec>, Location),
) -> ::std::vec::Vec<SigSpec>
{
    v
}

#[allow(unused_variables)]
fn __action101<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, SigSpec, Location),
) -> ::std::vec::Vec<SigSpec>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action102<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<SigSpec>, Location),
    (_, e, _): (Location, SigSpec, Location),
) -> ::std::vec::Vec<SigSpec>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action103<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, SigSpec, Location),
) -> ::std::vec::Vec<SigSpec>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action104<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<SigSpec>, Location),
    (_, e, _): (Location, SigSpec, Location),
) -> ::std::vec::Vec<SigSpec>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action105<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, ProcessStmt, Location),
) -> ::std::vec::Vec<ProcessStmt>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action106<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<ProcessStmt>, Location),
    (_, e, _): (Location, ProcessStmt, Location),
) -> ::std::vec::Vec<ProcessStmt>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action107<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, (), Location),
) -> ::std::vec::Vec<()>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action108<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<()>, Location),
    (_, e, _): (Location, (), Location),
) -> ::std::vec::Vec<()>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action109<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, ProcessSwitchCase, Location),
) -> ::std::vec::Vec<ProcessSwitchCase>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action110<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<ProcessSwitchCase>, Location),
    (_, e, _): (Location, ProcessSwitchCase, Location),
) -> ::std::vec::Vec<ProcessSwitchCase>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action111<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, (SigSpec, SigSpec), Location),
) -> ::std::vec::Vec<(SigSpec, SigSpec)>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action112<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location),
    (_, e, _): (Location, (SigSpec, SigSpec), Location),
) -> ::std::vec::Vec<(SigSpec, SigSpec)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action113<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, WireOption, Location),
) -> ::std::vec::Vec<WireOption>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action114<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<WireOption>, Location),
    (_, e, _): (Location, WireOption, Location),
) -> ::std::vec::Vec<WireOption>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action115<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, MemoryOption, Location),
) -> ::std::vec::Vec<MemoryOption>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action116<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<MemoryOption>, Location),
    (_, e, _): (Location, MemoryOption, Location),
) -> ::std::vec::Vec<MemoryOption>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action117<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, CellOption, Location),
) -> ::std::vec::Vec<CellOption>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action118<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<CellOption>, Location),
    (_, e, _): (Location, CellOption, Location),
) -> ::std::vec::Vec<CellOption>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action119<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, ProcessSync, Location),
) -> ::std::vec::Vec<ProcessSync>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action120<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<ProcessSync>, Location),
    (_, e, _): (Location, ProcessSync, Location),
) -> ::std::vec::Vec<ProcessSync>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action121<
>(
    parser: &mut Parser,
    (_, __0, _): (Location, ModuleStmt, Location),
) -> ::std::vec::Vec<ModuleStmt>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action122<
>(
    parser: &mut Parser,
    (_, v, _): (Location, ::std::vec::Vec<ModuleStmt>, Location),
    (_, e, _): (Location, ModuleStmt, Location),
) -> ::std::vec::Vec<ModuleStmt>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action123<
>(
    parser: &mut Parser,
    __0: (Location, SigSpec, Location),
    __1: (Location, Token, Location),
) -> ::std::vec::Vec<SigSpec>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action98(
        parser,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action103(
        parser,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action124<
>(
    parser: &mut Parser,
    __0: (Location, ::std::vec::Vec<SigSpec>, Location),
    __1: (Location, SigSpec, Location),
    __2: (Location, Token, Location),
) -> ::std::vec::Vec<SigSpec>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action98(
        parser,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action104(
        parser,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action125<
>(
    parser: &mut Parser,
    __0: (Location, ::std::option::Option<SigSpec>, Location),
) -> Vec<SigSpec>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action96(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action49(
        parser,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action126<
>(
    parser: &mut Parser,
    __0: (Location, ::std::vec::Vec<SigSpec>, Location),
    __1: (Location, ::std::option::Option<SigSpec>, Location),
) -> Vec<SigSpec>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action97(
        parser,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action49(
        parser,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action127<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, SigSpec, Location),
    __3: (Location, ::std::vec::Vec<ProcessSwitchCase>, Location),
    __4: (Location, Token, Location),
) -> ProcessStmt
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action90(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        parser,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action128<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, SigSpec, Location),
    __3: (Location, ::std::vec::Vec<()>, Location),
    __4: (Location, ::std::vec::Vec<ProcessSwitchCase>, Location),
    __5: (Location, Token, Location),
) -> ProcessStmt
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action91(
        parser,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        parser,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action129<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, String, Location),
    __3: (Location, String, Location),
    __4: (Location, Token, Location),
) -> ModuleStmt
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action80(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action69(
        parser,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action130<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, String, Location),
    __3: (Location, String, Location),
    __4: (Location, ::std::vec::Vec<CellOption>, Location),
    __5: (Location, Token, Location),
) -> ModuleStmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action81(
        parser,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action69(
        parser,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action131<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, String, Location),
) -> ModuleStmt
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action82(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action68(
        parser,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action132<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, ::std::vec::Vec<MemoryOption>, Location),
    __3: (Location, String, Location),
) -> ModuleStmt
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action83(
        parser,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action68(
        parser,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action133<
>(
    parser: &mut Parser,
    __0: (Location, Design, Location),
    __1: (Location, HashMap<String, Const>, Location),
    __2: (Location, Token, Location),
    __3: (Location, String, Location),
    __4: (Location, Token, Location),
) -> Design
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action76(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action75(
        parser,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action134<
>(
    parser: &mut Parser,
    __0: (Location, Design, Location),
    __1: (Location, HashMap<String, Const>, Location),
    __2: (Location, Token, Location),
    __3: (Location, String, Location),
    __4: (Location, ::std::vec::Vec<ModuleStmt>, Location),
    __5: (Location, Token, Location),
) -> Design
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action77(
        parser,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action75(
        parser,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action135<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, String, Location),
    __3: (Location, ::std::vec::Vec<ProcessSync>, Location),
    __4: (Location, Token, Location),
) -> ModuleStmt
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action92(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action70(
        parser,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
fn __action136<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, String, Location),
    __3: (Location, ::std::vec::Vec<ProcessStmt>, Location),
    __4: (Location, ::std::vec::Vec<ProcessSync>, Location),
    __5: (Location, Token, Location),
) -> ModuleStmt
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action93(
        parser,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action70(
        parser,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
fn __action137<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, Vec<SigSpec>, Location),
) -> ProcessSwitchCase
{
    let __start0 = __2.2.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action92(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        parser,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action138<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, Vec<SigSpec>, Location),
    __3: (Location, ::std::vec::Vec<ProcessStmt>, Location),
) -> ProcessSwitchCase
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action93(
        parser,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        parser,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action139<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, SigSpec, Location),
    __3: (Location, Token, Location),
) -> ProcessStmt
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action88(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        parser,
        __0,
        __1,
        __2,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action140<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, SigSpec, Location),
    __3: (Location, ::std::vec::Vec<ProcessSwitchCase>, Location),
    __4: (Location, Token, Location),
) -> ProcessStmt
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action89(
        parser,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        parser,
        __0,
        __1,
        __2,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action141<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, SigSpec, Location),
    __3: (Location, ::std::vec::Vec<()>, Location),
    __4: (Location, Token, Location),
) -> ProcessStmt
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action88(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        parser,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action142<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, SigSpec, Location),
    __3: (Location, ::std::vec::Vec<()>, Location),
    __4: (Location, ::std::vec::Vec<ProcessSwitchCase>, Location),
    __5: (Location, Token, Location),
) -> ProcessStmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action89(
        parser,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        parser,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action143<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, String, Location),
    __3: (Location, Token, Location),
) -> ModuleStmt
{
    let __start0 = __2.2.clone();
    let __end0 = __3.0.clone();
    let __temp0 = __action78(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        parser,
        __0,
        __1,
        __2,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
fn __action144<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, String, Location),
    __3: (Location, ::std::vec::Vec<ProcessSync>, Location),
    __4: (Location, Token, Location),
) -> ModuleStmt
{
    let __start0 = __3.0.clone();
    let __end0 = __3.2.clone();
    let __temp0 = __action79(
        parser,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        parser,
        __0,
        __1,
        __2,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action145<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, String, Location),
    __3: (Location, ::std::vec::Vec<ProcessStmt>, Location),
    __4: (Location, Token, Location),
) -> ModuleStmt
{
    let __start0 = __3.2.clone();
    let __end0 = __4.0.clone();
    let __temp0 = __action78(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action136(
        parser,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
fn __action146<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, String, Location),
    __3: (Location, ::std::vec::Vec<ProcessStmt>, Location),
    __4: (Location, ::std::vec::Vec<ProcessSync>, Location),
    __5: (Location, Token, Location),
) -> ModuleStmt
{
    let __start0 = __4.0.clone();
    let __end0 = __4.2.clone();
    let __temp0 = __action79(
        parser,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action136(
        parser,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action147<
>(
    parser: &mut Parser,
    __0: (Location, Token, Location),
    __1: (Location, Token, Location),
) -> ProcessSync
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action86(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action60(
        parser,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action148<
>(
    parser: &mut Parser,
    __0: (Location, Token, Location),
    __1: (Location, Token, Location),
    __2: (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location),
) -> ProcessSync
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action87(
        parser,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action60(
        parser,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action149<
>(
    parser: &mut Parser,
    __0: (Location, Token, Location),
    __1: (Location, Token, Location),
) -> ProcessSync
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action86(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        parser,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action150<
>(
    parser: &mut Parser,
    __0: (Location, Token, Location),
    __1: (Location, Token, Location),
    __2: (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location),
) -> ProcessSync
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action87(
        parser,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        parser,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action151<
>(
    parser: &mut Parser,
    __0: (Location, Token, Location),
    __1: (Location, Token, Location),
) -> ProcessSync
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action86(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62(
        parser,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action152<
>(
    parser: &mut Parser,
    __0: (Location, Token, Location),
    __1: (Location, Token, Location),
    __2: (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location),
) -> ProcessSync
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action87(
        parser,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62(
        parser,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action153<
>(
    parser: &mut Parser,
    __0: (Location, Token, Location),
    __1: (Location, ProcessSyncType, Location),
) -> ProcessSync
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action86(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action63(
        parser,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action154<
>(
    parser: &mut Parser,
    __0: (Location, Token, Location),
    __1: (Location, ProcessSyncType, Location),
    __2: (Location, ::std::vec::Vec<(SigSpec, SigSpec)>, Location),
) -> ProcessSync
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action87(
        parser,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action63(
        parser,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action155<
>(
    parser: &mut Parser,
    __0: (Location, Token, Location),
    __1: (Location, Token, Location),
) -> SigSpec
{
    let __start0 = __0.2.clone();
    let __end0 = __1.0.clone();
    let __temp0 = __action99(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action31(
        parser,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action156<
>(
    parser: &mut Parser,
    __0: (Location, Token, Location),
    __1: (Location, ::std::vec::Vec<SigSpec>, Location),
    __2: (Location, Token, Location),
) -> SigSpec
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action100(
        parser,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action31(
        parser,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action157<
>(
    parser: &mut Parser,
    __0: (Location, SigSpec, Location),
) -> Vec<SigSpec>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action94(
        parser,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        parser,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action158<
>(
    parser: &mut Parser,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Vec<SigSpec>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action95(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action125(
        parser,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action159<
>(
    parser: &mut Parser,
    __0: (Location, ::std::vec::Vec<SigSpec>, Location),
    __1: (Location, SigSpec, Location),
) -> Vec<SigSpec>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action94(
        parser,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        parser,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action160<
>(
    parser: &mut Parser,
    __0: (Location, ::std::vec::Vec<SigSpec>, Location),
) -> Vec<SigSpec>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action95(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action126(
        parser,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action161<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, String, Location),
) -> ModuleStmt
{
    let __start0 = __1.2.clone();
    let __end0 = __2.0.clone();
    let __temp0 = __action84(
        parser,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        parser,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action162<
>(
    parser: &mut Parser,
    __0: (Location, HashMap<String, Const>, Location),
    __1: (Location, Token, Location),
    __2: (Location, ::std::vec::Vec<WireOption>, Location),
    __3: (Location, String, Location),
) -> ModuleStmt
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action85(
        parser,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        parser,
        __0,
        __1,
        __temp0,
        __3,
    )
}

pub trait __ToTriple<> {
    fn to_triple(value: Self) -> Result<(Location,Token,Location), __lalrpop_util::ParseError<Location, Token, Error>>;
}

impl<> __ToTriple<> for (Location, Token, Location) {
    fn to_triple(value: Self) -> Result<(Location,Token,Location), __lalrpop_util::ParseError<Location, Token, Error>> {
        Ok(value)
    }
}
impl<> __ToTriple<> for Result<(Location, Token, Location), Error> {
    fn to_triple(value: Self) -> Result<(Location,Token,Location), __lalrpop_util::ParseError<Location, Token, Error>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
